{
 "10-tips-and-tricks-to-survive-the-omscs-program": {
  "href": "10-tips-and-tricks-to-survive-the-omscs-program",
  "title": "10 Tips and Tricks OMSCS to Survive the OMSCS",
  "summary": "10 tricks and tips to help you surive the OMSCS ## Tip # 1 - Slack!  Sign up here: https://omscs-study.github.io/  A place for somewhat friendly student interaction üòÖ Can be a bit noisy/weird sometimes  The unofficial, student-run, OMSCS slack channel  ## Tip #2 - OMS Hub  Access here https://www.omshub.org  Student-run class reviews for the OMSCS Great source to gauge how hard/easy certain classes are  OMSHub is a great class rating website  ## Tip #3 - OMS Central  Link: https://www.omscentral.com  Another student-run site to rate classes Not sure why there are two haha check both (they honestly align pretty well in terms of score/ratings)  OMSCentral is another class review site, not sure why there are two haha  ## Tip #4 - Reddit Reviews ?  Link: https://www.reddit.com/r/OMSCS/  I have never used these personally but I bet you could find some good info there  Reddit reviews of classes and such  ## Tip #5 - CoolsterCodes!  Shamless plug üòè  Just a guy trying to help you succeed in the OMSCS Really liked the journey  My Awesome blog üòè  ## Tip #6 - LucidChart  Example : https://lucid.app/documents  Super useful for diagraming Easy to create project reports with it Also nice to explain concepts to classmates or ask questions with your design in mind  Lucidchart free for GT students!  ## Tip #7 - Georgia Tech Library on Libby!  Link: https://libbyapp.com/  Whole library available to you! Tons of books academic or otherwise Free / comes with student status  Libby! Georgia Tech's library has a lot of great reads  ## Tip #8 - Private Github!  FAQ - https://support.cc.gatech.edu/support-tools/faq/what-gt-github-enterprise  Unlimited private repositories!! Super useful to store assignments Free  ## Tip #9 - Waitlist history!  Link: https://docs.google.com/spreadsheets/d/1rqv6N1lxC9xR9RGPXhEoqnZIdaHMdixrqu5g7qSL4/edit#gid=1237086826  Not sure you're going to get in a class? See the historical data!  This is super helpful, especially when trying to plan classes!  You can see historical data on waitlists for classes in the OMSCS!  ## Tip #10 - Family  Tell your friends, help you succeed  Get support! Don't feel alone  Teamwork makes the dream work! Tell you family and friends you are in the program to get support",
  "tags": [
   "OMSCS"
  ],
  "img": "/content/images/10-tips-and-tricks-to-survive-the-omscs-program/tips.jpg"
 },
 "about": {
  "href": "about",
  "title": "About",
  "summary": "  Hello I'm Paul, a Senior Software Engineer at Microsoft who likes to make YouTube videos by night.",
  "tags": null,
  "img": ""
 },
 "configmap-file-mount-on-a-windows-kubernetes-pod": {
  "href": "configmap-file-mount-on-a-windows-kubernetes-pod",
  "title": "ConfigMap File Mount on a Windows Kubernetes Pod",
  "summary": "Mounting a ConfigMap as a file in Windows Kubernetes In this article we will mount a configMap as a file into a Windows Kubernetes pod.  ConfigMaps let you specify configuration values of an application as part of the deployment yaml. This decouples your application deployment from the config values, which is best practice.    Source code  Create a Windows Kubernetes cluster  We will use AKS Engine to create a Windows Kubernetes cluster.  make-aks-engine-cluster.ps1 along with win-cluster.json will create a Windows Kubernetes cluster for you in Azure. All you need to provide is a $SUBSCRIPTIONID.  $SUBSCRIPTIONID='' $CLUSTERNAME='win-cluster' $LOCATION='westus2' $APIMODEL='win-cluster.json'  Creates the resource group which will house your cluster az group create --subscription $SUBSCRIPTIONID --location $LOCATION --name $CLUSTERNAME  Creates an Azure Service Principal to let AKS-Engine deploy resources (your cluster) to your resource group $AZSP=az ad sp create-for-rbac --name win-cluster-service-principal --role=\"Owner\" --scopes=\"/subscriptions/$SUBSCRIPTIONID/resourceGroups/$CLUSTERNAME\" -o json | ConvertFrom-Json $CLIENTID=$AZSP.appId $CLIENTSECRET=$AZSP.password  Let azure permissions propogate before creating cluster Start-Sleep -Seconds 180  Create a hostprocess capable kubernetes cluster using AKS-Engine .\\aks-engine deploy `     --subscription-id $SUBSCRIPTIONID  `     --client-id $CLIENTID `     --client-secret $CLIENTSECRET `     --resource-group $CLUSTERNAME `     --dns-prefix $CLUSTERNAME `     --location $LOCATION `     --api-model $APIMODEL `     --force-overwrite  {    \"apiVersion\": \"vlabs\",    \"properties\": {       \"orchestratorProfile\": {          \"orchestratorType\": \"Kubernetes\",          \"orchestratorRelease\": \"1.23\",          \"kubernetesConfig\": {             \"networkPlugin\": \"azure\",             \"containerRuntime\": \"containerd\",             \"windowsContainerdURL\": \"https://github.com/kubernetes-sigs/sig-windows-tools/releases/download/windows-containerd-nightly/windows-containerd.tar.gz\",             \"loadBalancerSku\": \"basic\"          }       },       \"masterProfile\": {          \"count\": 1,          \"vmSize\": \"StandardD2v2\",          \"availabilityProfile\": \"AvailabilitySet\",          \"platformUpdateDomainCount\": 1       },       \"agentPoolProfiles\": [          {             \"name\": \"windowspool\",             \"count\": 1,             \"vmSize\": \"StandardD8sv3\",             \"availabilityProfile\": \"VirtualMachineScaleSets\",             \"osType\": \"Windows\",             \"enableVMSSNodePublicIP\": true          }       ],       \"windowsProfile\": {          \"adminUsername\": \"azureuser\",          \"adminPassword\": \"password1234$\",          \"sshEnabled\": true,          \"enableAutomaticUpdates\": true,          \"WindowsPublisher\": \"microsoft-aks\",          \"WindowsOffer\": \"aks-windows\",          \"WindowsSku\": \"2019-datacenter-core-ctrd-2108\",          \"imageVersion\": \"17763.2061.210830\"       },       \"linuxProfile\": {          \"adminUsername\": \"azureuser\",          \"ssh\": {             \"publicKeys\": [                {                   \"keyData\": \"\"                }             ]          }       }    } }  Upon execution of the script, you should hopefully see:  Deploying a Windows Kubernetes using AKS Engine  Build a containerized app  The app we create will simply print the contents of a given file.  package main  import ( \t\"fmt\" \t\"io/ioutil\" \t\"os\" \t\"time\" )  func main() { \tconfigMapFilePath := os.Args[1]  \tfmt.Printf(\"configMap file path: %s\\n\", configMapFilePath)  \t// Read the configMap as a file from inside the container! \tcontent, err := ioutil.ReadFile(configMapFilePath) \tif err != nil { \t\tfmt.Printf(\"Error from reading: %v\\n\", err) \t} \ttext := string(content) \tfmt.Println(text)  \t// Sleep \ttime.Sleep(1  time.Hour) }  We containerize it with a Dockerfile, which packages the executable into container format:  Use golang image to build binary FROM golang:1.17 AS builder  Make a working directory WORKDIR /usr/local/app  Copy the source code into the container COPY src/ .  Build the app RUN go build app.go  Copy the app binary into the final container image FROM mcr.microsoft.com/windows/nanoserver:1809 COPY --from=builder /usr/local/app/app.exe \\     /usr/local/bin/app.exe  ENTRYPOINT [\"/usr/local/bin/app.exe\"]  And bulid it using the docker command like program like so:  docker build -t configmapfilemount:v1.0.0 -f Dockerfile .  Building the containerized app  Launching a Pod which reads the configMap as a file  Next we define a pod and configMap in yaml format,  apiVersion: v1 kind: Pod metadata:   name: configmapfilemount spec:   nodeSelector:     kubernetes.io/os: windows   containers:   name: configmapfilemount     image: coolstercodes.azurecr.io/configmapfilemount:v1.0.0     imagePullPolicy: Always     args: [\"C:\\\\configmapdirectory\\\\configfile.json\"]     volumeMounts:       name: configmapmount         mountPath: /configmapdirectory   volumes:     name: configmapmount       configMap:         name: myconfigmap --- apiVersion: v1 kind: ConfigMap metadata:   name: myconfigmap data:   configfile.json: |     {       \"ConfigKey\": \"Value\"     }  You'll see above that we specify a volume at the pod layer, and give it the name of our configMap.  Next in the container layer, we specify a volumeMount, which mounts the volume previously specified.  As part of the volumeMount we give a new file path where this configMap will live, according to the container.  And finally, we pass C:\\\\configmapdirectory\\\\configfile.json to the container as the file we wish to print the contents of.  To deploy this pod, we use kubectl like so:  .\\kubectl --kubeconfig .\\output\\win-cluster\\kubeconfig\\kubeconfig.westus2.json apply -f configmapfilemount.yaml  Deploying the pod and configMap  Then we can check on the container logs with kubectl like so:  .\\kubectl --kubeconfig .\\output\\win-cluster\\kubeconfig\\kubeconfig.westus2.json logs configmapfilemount  App logs which print the contents of the ‚Äúfile‚Äù, aka the configMap!*  You're done! Now you've deployed a Windows Kubernetes pod which reads a configMap as a file.",
  "tags": [
   "Kubernetes",
   "Windows"
  ],
  "img": "/content/images/configmap-file-mount-on-a-windows-kubernetes-pod/terminal.jpg"
 },
 "docker-nanoserver-base-image-windows": {
  "href": "docker-nanoserver-base-image-windows",
  "title": "Docker Nanoserver base image Windows",
  "summary": "Building a docker image using nanoserver base Here we will make a windows Docker image which uses Windows Nano Server as the base image  This is great for deploying your .Net apps on Docker    Source code  Prereqs  Docker Desktop installed on Windows Enterprise, Pro or Educational machine     Windows Home edition will not work since Hyper-V needs to be enabled and Windows Home just doesn't offer it Hyper-V feature enabled Visual Studio     Or the .Net 6.0 SDK A .Net app (.Net versions 3.1, 5.x and 6.x)     .Net Framework apps won't work on Nano Server (.Net versions 4.x)  Create the app  First we need to create a sample .Net app  dotnet new console -o App -n DotNet.Docker  This creates a new folder App with a very simple console app in it using .Net version 6.0  Edit the app  We're just going to edit it slightly to loop after saying ‚ÄúHello world!‚Äù  Console.WriteLine(\"Hello, World!\");  for (int i = 0; i \u003c 500; i++) {     Console.WriteLine(\"Sleep for 2 seconds.\");     Thread.Sleep(2000); }  Build the app  We'll build the app and copy the binaries into the container image  Navigate to the App directory and run:  dotnet publish -c Release  This will create the precious binary files at App/bin/Release/net6.0/publish  Create Dockerfile  Here is the final Dockerfile, though I will explain each part below  FROM mcr.microsoft.com/powershell:lts-nanoserver-1909  Run as admin USER ContainerAdministrator  Make default shell powershell SHELL [\"pwsh\", \"-command\"]  Dotnet 6.0.101 install WORKDIR Users\\\\Example\\\\dotnetinstall\\\\6.0.101 RUN Invoke-WebRequest -OutFile dotnet-install.ps1 -URI https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.ps1 RUN .\\dotnet-install.ps1 -Version 6.0.101 -InstallDir \"\"\"C:\\\\Users\\\\Example\\\\\\\\dotnetinstall\\\\6.0.101\"\"\"  Copy the application binaries into the docker image COPY App/bin/Release/net6.0/publish/ C:\\\\Users\\\\Example\\\\App  Run the application binaries as the main container program WORKDIR C:\\\\Users\\\\Example\\\\App ENTRYPOINT [\"C:\\\\Users\\\\Example\\\\dotnetinstall\\\\6.0.101\\\\dotnet.exe\", \"C:\\\\Users\\\\Example\\\\App\\\\DotNet.Docker.dll\"]  FROM mcr.microsoft.com/powershell:lts-nanoserver-1909 is to specify which Docker image we want to use as the base image. This powershell:lts-nanoserver-1909 image is from Microsoft's powershell docker hub. It comes with really lightweight version of the Windows OS called Nano server which is great for containers, since you generally want to keep container images small.  This powershell:lts-nanoserver-1909 image also comes with a new version of Powershell 7 called pwsh (read more here).  pwsh is an open-source cross-platform version of Powershell. There are a few extra steps to get it to do all of what previous versions of Powershell could do which I will cover in a different article.  USER ContainerAdministrator is to make the commands run as admin, since this is not set by default in Windows (Linux it is default). Basically without this command, any subsequent steps can't access files downloaded/copied from previous steps.  SHELL [\"pwsh\", \"-command\"] is to make the commands that happen in the RUN sections executed through pwsh instead of the default cmd  WORKDIR Users\\\\Example\\\\dotnetinstall\\\\6.0.101 is to make a folder in the container image with the given path to use as a workspace. It also navigates to this directory for any subsequent commands.  RUN Invoke-WebRequest -OutFile dotnet-install.ps1 -URI https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.ps1 is to download a dotnet install script and then the following command is to install the dotnet runtime into the C:\\\\Users\\\\Example\\\\\\\\dotnetinstall\\\\6.0.101 directory. We later use this runtime package to actually run our .Net app.  Instead of manually installing via this dotnet-install.ps1 script, you could alternatively use mcr.microsoft.com/dotnet/aspnet:6.0 (read more here) as the base image, but I personally find it hard to debug since it doesn't come with cmd, powershell, pwsh, or any sort of shell.  COPY App/bin/Release/net6.0/publish/ C:\\\\Users\\\\Example\\\\App is to copy the folder with the binaries into the container image.  WORKDIR C:\\\\Users\\\\Example\\\\App is to create a working directory and finally ENTRYPOINT [\"C:\\\\Users\\\\Example\\\\dotnetinstall\\\\6.0.101\\\\dotnet.exe\", \"C:\\\\Users\\\\Example\\\\App\\\\DotNet.Docker.dll\"] is to tell Docker to invoke the dotnet runtime which we installed as the main entrypoint of the container, and to pass it the DotNet.Docker.dll file as an argument. This will essentially start our app and print \"Hello world!\" and then loop.  Build the Docker image  docker build -t dotnetexample:v1.0.0 -f .\\Dockerfile .  Run this command from just outside the App directory. Ensure the Dockerfile is also just outside the App directory.  Remember: you have to enable the Hyper-v feature for Windows 10 Enterprise, Pro or Educational. Windows 10 home will not work.  You must also ensure that Docker Desktop is using Windows Containers:  Ensure Docker Desktop is using Windows Containers  If you need quick access to a Windows 10 Enterprise machine, you can create one in Azure Portal  Creating a Windows Enterprise machine in Azure Portal if need be  Run image  docker run dotnetexample:v1.0.0  Run the docker image!  You can also interactively run powershell commands in the container with:  docker run -it --entrypoint pwsh dotnetexample:v1.0.0  Interactively run powershell commands in container image  You've done it!",
  "tags": [
   "Development",
   "Docker",
   "Windows"
  ],
  "img": "/content/images/docker-nanoserver-base-image-windows/docker.png"
 },
 "euclid": {
  "href": "euclid",
  "title": "How Euclid Solved Programming 3,000 Years Ago",
  "summary": "Quite the baller if you ask me Greatest Common Divisor  Euclid in about 300 B.C. devised an algorithm for finding the greatest common divisor of two whole numbers  8 is the Greatest Common Divisor of 16 and 24  The slow way  One way to find the GCD of two numbers is to list out all the factors of each number, and iterate through each list to find the highest common number  The slow way of finding the GCD of two numbers  The fast way  Let's break this down:  gcd() symbolizes a \"function call\" The \"function\" is itself This is call Recursion  The fast way to compute the GCD of two numbers  GCD broken down  This is where Modular Arithmetic is useful  Euclid's algorithm calls for swapping a for b in the function call (i.e. the \"recursive\" call), and having the second argument be:  a mod b  This means, that if a were 16 and b were 24, then 16 mod 24 is just 16, because 24 is bigger than 16, so 24 can't divide 16 at all, so the remainder is just 16  On the next call however, 24 is modularly divisible by 16 (it leaves us with 8 left over)  So the next function call paramters are 16 and 8  GCD internally working  Hitting the \"b==0\" base case  The crazy thing about this algorithm  This still remains one of the FASTEST ways to get the GCD of two numbers  Even with all our fancy computing power, Euclid had this solved roughly 2-3,000 years ago üòÇ  What a baller üòé",
  "tags": [
   "Programming",
   "Science"
  ],
  "img": "/content/images/euclid/Euclid.png"
 },
 "georgia-tech-omscs-ai-ethics-and-society-review-cs-6603": {
  "href": "georgia-tech-omscs-ai-ethics-and-society-review-cs-6603",
  "title": "Georgia Tech OMSCS AI, Ethics and Society Review | CS 6603",
  "summary": "AI on steroids TL;DR  Easy 7 hours per week Interesting  Let's get ethical!  What is Ethics?    ‚ÄúEthics is a real discussion of the competing conceptions of the good.     This is just the corporate anti-shoplifting rules.‚Äù     - Oscar Martinez  Okay what really is ethics?   It's basically how to treat all users and people fairly  Graded course material  5 Homework Projects     Some programming involved     8% each 2 Written Crituques     Short 1-2 page essays     5% each 6 Case Studies     Quick survey-type responses     ~1% each 4 Exercises     Simple 1-paragraph responses     ~2% each 2 Exams     1 online, 1 take-home     10% each  Homework Projects  Facebook  In this assignment you will pull the advertising data that Facebook (or any other social media platform) has on you personally   You will then categorize the different companies into things like ‚ÄúClothing and Apparel‚Äù, ‚ÄúAutomotive‚Äù etc.   You then create a data flow graph of the different accuracies of the advertising for you personally  You do not need a Facebook account for this   But it definitely makes things easier (I used my wife's account LOL)  An example data flow graph  Stats 101  Given a dataset, you will analyze the statistics of it by separating out the ‚Äúprotected class variables‚Äù and make some graphs and charts about them   You will be using:  python (most likely) matploblib pandas  The graphs can be tricky to get right on matplotlib but other than that the assignment is pretty straightforward  Just some random graphs lols  AI/ML Parts 1 \u0026 2  In this project (2 parts) you will first:  Download a ‚Äútoxicity‚Äù in comments datasets, actually really interesting Try to find trends in the data, like gender, age, race etc.  In part 2 you'll:  Use word-embeddings to find bias in words Word embeddings are cool! Read more about them here: The Illustrated Word2vec  Imagine you can have words, and add them together, to create new meanings   Such as female + royalty = queen   You can literally do this with word embeddings [1]   Problem is there are biased meanings in words today, so you'll investigate that  Word embeddings visualized courtesy of Jay Alammar  Fairness and Bias  You will find a dataset that has to do with a protected class   You will then split the data into ‚Äúprivileged‚Äù vs ‚Äúunprivileged‚Äù groups and analyze using:  Disparate impact Statistical difference parity  Matplotlib is your friend!   It will help you render all the graphs you need   One hack a student found in my semester was to inspect the website for the AI 360 fairness assignment to make your graph  Use Matplotlib for everything in this class  Final Project  Here you will take a dataset of your choice and do a bunch of analysis on it   It does take a while actually, maybe like 15-20 hours   It is similar to the Fairness project, but lengthier  You could always use the UCI Machine Learning Repository to get an idea for a dataset Start early!  University of California Irvine's Machine Learning repository for datasets  Written Critiques  These are very short 1-2 page write-ups, about a certain topic in AI:  You will use the ‚ÄúEthical Autonomous Vehicle‚Äù tool to experience some self-driving car scenarios And also use Google's ‚ÄúWhat-If‚Äù tool to experiment with some datasets  These are very easy assignments, about 30-45 minutes to complete  Case studies  Case studies are just paragraph responses to prompts, that you comment on for your peers   Super simple and quick  Exercises  Even simpler than case studies, just a paragraph or two about a topic in AI  Exams  Midterm     Canvas     Open-note Final     Take-home     15-20 hours so start early     Programming     Similar to final project  Grade breakdown  Projects     Facebook - 100%     Stats 101 - 18% (didn't do it)     AI/ML - 100%     Fairness and Bias - 98%     Final project - 100% Written critiques     Ethical autonomous vehicles - 85%     What-if - 100% Case studies - 95% Exercises - 95% Exams     Midterm - 82%     Final - 100%!  Final score: 89.16% or a B üòã  1] Jay Alammar's [word2vec visualization",
  "tags": [
   "AI",
   "Ethics",
   "OMSCS"
  ],
  "img": "/content/images/georgia-tech-omscs-ai-ethics-and-society-review-cs-6603/Ethics5.jpg"
 },
 "georgia-tech-omscs-ai-for-robotics-review-cs-7638": {
  "href": "georgia-tech-omscs-ai-for-robotics-review-cs-7638",
  "title": "Georgia Tech OMSCS AI for Robotics Review | CS 7638",
  "summary": "Georgia Tech's Robotics class! TL;DR  Medium Avg 12 hours a week Cool projects!  What is AI for Robotics?  AI for Robotics specializes in localization (where are you?), mapping (what is around you?) search (where is the thing you're looking for?) and control (what do you do to get to your goal?)  Graded course material  4 projects     13% each 1 ‚Äúmini-project‚Äù     10% each 6 ‚Äúproblem sets‚Äù     Short coding assignments     3% each 2 Exams Extra-credit!  Projects  Kalman Filter : Meteorites  Kalman Filtering is a way to predict the future locations of objects, given their past locations  Kalman Filtering at work!  You will use:  Linear algebra Numpy Trigonometry  The Kalman Filters lecture videos are incredibly helpful here, make sure to watch them all   If you want to get started early I believe this free Udacity course has most of the same material  Particle Filter : Mars Glider  You will guide a glider around a map using particle filters  Particle filters locating a glider  Particle filters is equivalent to ‚Äúcrowd sourcing‚Äù a location of an object (lecture videos)   You generate a bunch of points and slowly begin to choose the most likely points   You will use:  Linear algebra Statistics Trigonometry Creativity  I say you'll use ‚Äúcreativity‚Äù because you have to come up with a lot of the specifics yourself, i.e. how many points? What noise level of measurements will you allow? How will you determine an appropriate error? etc. etc.   My advice is to watch the lecture videos once through before you even start coding or reading the spec, to get a high-level understanding first  I only got 63/100 on this project but still managed to get a B in the course (start early!)  Search: Warehouse  Here you will program a robot to search the room optimally for boxes  Search in action  You will use:  Cartesian plane Planning For-loops  This project isn't too bad, but it takes time   Make sure to understand what your robot should do on paper, before programming   The lecture videos are almost verbatim what you need (lecture videos)  SLAM : Indiana Drones  SLAM stands for ‚ÄúSimultaneous Location and Mapping‚Äù, meaning you find out where you are in the world, while you map out what's in the world  SLAM at work!  There are a few things you should know going into this (from the lecture videos):  Linear algebra Numpy Trigonometry  It's a bit difficult to understand the linear algebra needed for this project, so I would definitely suggest taking some extra time before you start coding, to do an example out by hand like Prof. Thrun does in the videos.   That being said, it is by far the coolest project, because this actually has applications in the real world.  Mini-project  Drone PID Controller  Here you will be controlling a drone's tilt (i.e. roll angle) and thrust to get it to the goal   PID is a fancy term which stands for ‚ÄúProportional-Integral-Derivative‚Äù   Essentially what it means that when you add a little bit of thrust or tilt, that little bit will affect the next amount of thrust or tilt you give  Roll angle and thrust  This project follows the lecture videos very closely, which is nice   You just have to fill out a couple of formulas in code, but they give you the formulas in the videos   You can also earn extra credit on this project! Which I did by getting an extra 0.22 percent on it üòé  Problem sets  Problem sets are short coding assignments you do while following along in a lecture video   They are quite literally ‚Äúcopying‚Äù (i.e. transcribing) code from the lecture videos into your python file and submitting it   So very easy and informative at the same time  Exams  The exams are great:  5% of final grade (midterm) or 10% of final grade(final) 15 questions (midterm) or 30 questions (final) You get two tries for each exam!     Best score is kept  The exams together are worth roughly 1 project   It's ueasy points/u, so study up and get that good grade!  Extra credit!  Yeah this class is great, here are all the ways you can get extra credit:  Participate in bi-weekly ‚ÄúHardware or research challenges‚Äù Excel in Piazza posts and helpfulness Get extra points on projects  I personally did not get extra credit (except for that one project where I got 0.22 points of extra credit üòé)   But it is great that they offer the option  Grade breakdown  Projects:     Kalman Filters: Meteorites - 95%     Particle Filter: Mars Glider - 63%     Search: Warehouse - 82%     SLAM: Indiana drones - 88% Mini project:     Drone PID controller - 100.22% üòé Problem sets - 100% Exams:     Midterm - 80%     Final - 64%  Final score: 85.56% or a B üòé",
  "tags": [
   "OMSCS",
   "Robotics",
   "Science"
  ],
  "img": "/content/images/georgia-tech-omscs-ai-for-robotics-review-cs-7638/AIforR2.jpg"
 },
 "georgia-tech-omscs-artificial-intelligence-review-cs-6601": {
  "href": "georgia-tech-omscs-artificial-intelligence-review-cs-6601",
  "title": "Georgia Tech OMSCS Artificial Intelligence Review | CS 6601",
  "summary": "Georgia Tech's AI class! TL;DR  Medium-Hard Avg 20 hrs per week Get a free pass on 1 of 6 projects  What is Artificial Intelligence?  Artificial Intelligence (AI) is basically getting computers to do human tasks.  Graded course material  6 projects     12% each     1 of them is dropped from your grade     Very programming heavy 2 exams     Midterm is 15%     Final is 20% Extra credit     2 of the projects offer extra credit     My semester there was an additional extra credit opportunity for watching Meta lectures Curved grading     Above the class median is an A     1 standard deviation below the median is a B  Project overview  Tri-directional search  In this project, you're given a map of cities, and start by implementing some search algorithms to get from point A to point B  Algorithms used are:  Breadth-first search Uniform cost search A search Bidirectional uniform cost search Bidirectional A Tridirectional search  Breadth-first search   Let's say the graph of cities is like in the picture below, the paths explored would be:  A-  B A-  D  Breadth first search example  Uniform cost search   If given the blow graph for uniform cost search, the paths explored would be:  A-  B (5) A-  B-  C (6) A-  D (6)  With uniform cost search, you just take the cheapest path every time.   It is guaranteed to find the shortest path from point A to point B, but is very costly with big graphs  Uniform cost search example  A search With A search, you have some kind of estimate as to how far away a point is from it's destination (h).   You then combine how far it took you to get to your current point (g), plus the estimate to your destination, to choose the next point to explore.  In the below example, the paths explored would be:  A-  B (g=5, h=7, total cost of 12); A-  D (g=6, h=3, total cost of 9) A-  D-  E (g=13, h=0, total cost of 13) but we're not done yet, the algo ends when goal is popped off, not put on A-  B-  C (g=6, h=3, total cost of 9) A-  B-  C-  D (g=9, h=3, total cost of 9); A-  B-  C-  E (g=9, h=0, total cost of 9, and update to use this path, rather than A-  D-  E) A-  B-  C-  E  A graph example  Bidirectional uniform cost search   Basically, you do uniform cost search, but from the start point AND from the end point, and see where the two paths meet in the middle  Bidirectional A   Same thing, you do A from start and end and merge paths where they meet in the middle  Tridirectional search   This one's a doozey, my advice is to not use a greedy approach   Use a switch-approach, meaning expand start path, then expand the end path, alternating back and forth until they overlap   And ‚Äúoverlapped‚Äù means when your ‚Äúpopped‚Äù or AKA ‚Äúexplored‚Äù maps meet, not simply when your ‚Äúfrontier‚Äù maps meet    Isolation  I did not do this project since I was so time-crunched for work üòã  The github repo for it (public to GT students) is here: omscs6601/assignment2  Bayes Nets  Probability based, implementing the Baye's rule  Baye's rule  You're given a set of ‚Äúalarms‚Äù, that only sound on certain conditions; i.e. ‚ÄúThe alarm has a 15% chance of sounding when the temperature drops below freezing‚Äù  I would read very carefully the documentation here: https://pgmpy.org/models/bayesiannetwork.html as it explains one example using grades very well  Documentation from https://pgmpy.org/models/bayesiannetwork.html  Noice how all the columns add up to 1   So this is saying ‚ÄúGiven that the class is easy, the student is smart, the chance the student gets a grade C is 80%‚Äù   You just have to make similar tables for the problem they give you   For example, if the information given to you were ‚ÄúIt is rainy, 90% of the time‚Äù, you might make a table like:  raindistribution = TabularCPD('rain', 2, values=[[0.10, 0.90]])  So False value comes first (10%), True value comes second (90%)  You also do a soccer game matchup problem, which is just bigger tables. Then you sample from those using a couple algorithms.  You only get 5 submissions on this project so choose carefully.  Decision Trees  This is your typical decision tree, basically like this picture:  Super simple decision tree  Gaussian Mixture Models  Prepare yourself  In this project, you are clustering pixels in an image, and are given a few algorithms to implement via a research paper:  k-means clustering Gaussian mixture models Bayesian information criterion  K-means clustering   For K-means clustering, you are going to use numpy to sample random points from a given array (pixels)   You then take those points, and use them as cluster centers   Gradually moving those cluster centers around, until they stop changing  Clustering results example from what you'll implement  K-means clustering : continued   Next you'll cluster a picture, then segment the image, by making all the pixels that belong to a cluster, that mean cluster value  Segmentation with k=2 and k=4  Multivariate Gaussian Mixture Model   Instead of a traditional 2D gaussian curves, here you'll be finding the probability that a pixel belongs to a certain Multivariate Gaussian distribution. Then adjusting the distributions in an iterative step, kind of like in k-means clustering  You can start going through the documents in the assignment (public repo for GT students: omscs6601/assignment5)  I would start by reading:  read/gaussian.pdf to understand how multivariate Gaussians work Watching Clustering (4): Gaussian Mixture Models and EMs on YouTube  First thing you'll need to implement is finding the covariance matrix of a multivariate gaussian distribution   Basically implementing the following equation found in read/em.pdf of the ^ github repo  read/em.pdf covariance equation  Next you will choose random points from your picture, and make the covariance matrix for each point, as well as component mixing coefficients.  Component mixing coefficient from read/em.pdf  You have to implement a lot more functions, while following the papers and reading a bunch of numpy documentation.   I myself took a lot of help from two posts in my semester's Ed stem forum, which really explained well what you want to be doing.   You'll probably just have to ask your teammates and fellow students for help on this one, the prob and Estep functions are gnarly.  In the end, you end up with this though üôÇ  Multivariate Gaussians, yaaaay..  The last part of this project is just convergence criteria.  Bayes Information Criterion penalizes models that have a lot of parameters, and you implement it in your algoritm: Bayesianinformationcriterion  Hidden Markov Models  In this assignment, you will make state machines (models) that compute the probability of one hand movement type from one stage to the next, to predict a word that someone is signing in sign language.  A video representation of HMMs  You track the y coordinates of the hands of someone signing, and those coordinates are the input to your model.  An HMM diagram*  You can also start reading through this repository (through GT credentials) at omscs6601/assignment6  It's not that much code, just filling in probability tables according the the sheet you are given.  You only get 10 submissions on gradescope so choose wisely. I think it took me 4-5 tries.  Exams  The Midterm is worth 15% of your final grade  I got 65% on it  The Final is worth 20% of your final grade  I got 62%  Grade breakdown  Here's what I got in the class Spring 2022  Assignment 1 - 92% Assignment 2 - 0% Assignment 3 - 81% Assignment 4 - 100% Assignment 5 - 92% Assignment 6 - 100% Midterm - 65% Final - 62%  Final grade: 83.07% of a B grade",
  "tags": [
   "AI",
   "OMSCS"
  ],
  "img": "/content/images/georgia-tech-omscs-artificial-intelligence-review-cs-6601/AI2.jpg"
 },
 "georgia-tech-omscs-computer-networks-review-cs-6250": {
  "href": "georgia-tech-omscs-computer-networks-review-cs-6250",
  "title": "Georgia Tech OMSCS Computer Networks Review | CS 6250",
  "summary": "Georgia Tech's Computer Networks class TL;DR  Easy Avg 5-7 hrs per week (if that) Cannot work on assignment ahead of time     Assignments are locked until week of due date Took it during Summer 2022, easily manageable during shorter term     Would be a good 2nd class candidate during Fall/Spring  What is Computer Networks?  In this course, you'll learn how basic computer networks, work (ha ha üòÖ)  Graded course material  2 Exams     Closed-notes     Each exam is 15% of final grade     Difficutly level: Easy, they mirror the quizzes (which are open-note) closely 12 Quizzes     uOpen/u notes     See correct answers after taking them     Very similar to the exams     Each quiz is 0.83% of final grade     Difficutly level: uExtremely easy/u, can just ctrl+f in each Canvas module for the answers 4 Projects     Difficulty level: Easy, each lab comes with very detailed instructions     Time spent on avg per project: 5 hrs     Each project is weighted ~15% of final grade     Unlimited number of submissions on Gradescope         Except SDNFirewall, you get 1 submission for that through Canvas, but can test it locally first Extra-credit     This class offers a 3% extra-credit project     I did not do it, but it's a lot of extra credit if needed!  Project overview  Course Virtual Machine Setup  This was not a graded-project, but was necessary for 2/4 projects.  Basically, you just need to follow some instructions to download a Virtual Machine image that the TA's made for the class  I used a uMacbook Pro with an M1 chip using Parrallels Desktop/u, and found no issues  Parrallels Desktop student edition set me back $40.  For non-M1 chips, setup was free and easy through VMWare  Parrallels Desktop invoice  Non-M1 chip options  Parrallels Desktop on Mac with an M1 chip  Spanning Tree project  The idea behind spanning tree, is to find the minimum spanning tree between a graph of nodes:  Spanning Tree example  You are given each node's: ID Neighbors  The algorithm is given to you in the lectures, and covers the logic completely.  Took about 6-7 hours to complete, including lecture reading/video watching.  You get an unlimited amount of submissions through Gradescope.  Distance Vector Routing project  Basically the same as Spanning Tree, but now the edges have weights, but now you want to find the least-costly paths between nodes that spans the graph:  Distance Vector  Unlimited submissions allowed on Gradescope  Most of the logic is in the videos/reading  Total time spent was probably like 6-7 hours, including reading/video watching.  SDN Firewall project  This was implementing a firewall through code that you write  The nice thing is, that you just give some settings to a code package called pox, and pox handles the actual filtering/selection of packets for you.  PRO TIP ONLY read the appendix A for pox guidelines, it has everything you need to know to complete the project:  Only read this appendix (in project description) for pox related questions, it is all you need  Total time spent on this one was more like 10 hours including reading and video watching.  Are only allowed uone submission/u on Canvas, but you can test your code locally through a given code package in the repo.  BGP Measurements  This one is filtering out packets of interest from rib files that have historical data of BGP records being passed around the internet.  It's really just a leetcode-type problem of using sets, hashmaps, for-loops etc.  Total time was about 4 hours, including reading.  Unlimited amount of submissions on Gradescope  Exams and Quizzes  Exams are fairly straight forward, and you can easily get an A in the class by getting 100% or close to it through Projects, then not really needing a good score on exams.  My case was:  Projects: 60/60% Exams: 24.71/30% Quizzes: 6.27/10%  Total grade: 90.98% or an A",
  "tags": [
   "Networking",
   "OMSCS"
  ],
  "img": "/content/images/georgia-tech-omscs-computer-networks-review-cs-6250/Networks3.jpg"
 },
 "georgia-tech-omscs-graduate-algorithms-review-cs-6515": {
  "href": "georgia-tech-omscs-graduate-algorithms-review-cs-6515",
  "title": "Georgia Tech OMSCS Graduate Algorithms Review | CS 6515",
  "summary": "Georgia Tech's dreaded Grad Algos class üò± What is Graduate Algorithms?  Algorithms is the study of getting computers to do things fast and efficiently üèÉüèª‚Äç‚ôÇÔ∏èüöÄ  Graded Course Material  8 Homeworks (~%2 each) 3 Coding Project (%3 each) 3 Exams (%24 each)  Homework 0: Big-O Notation, Graph Theory and Boolean Logic  This is a self-assessment in how well you know:  Big-O Notation Graph theory Boolean logic  Homework 1: Dynamic Programming  Example: Edit Distance  You're trying to find out how ‚Äúclose‚Äù two words are The allowed actions are Replace, Insert and Remove  You can solve this using Dynamic Programming  Example Edit Distance  Dynamic Programming way!  Homework 2: Graphs and logarithmic  Example: Traveling Salesman Problem  Try to find the shortest path between cities Actually super complicated üò±  Traveling Salesman Problem visualized  Homework 3: Fast-Fourier Transform  Fast Fourier Transform lets you break apart into pieces things like sound, electric signals etc. Sounds like it is super useful for stuff.. I guess that's how Shazam works.. ü§∑üèª‚Äç‚ôÇÔ∏è  Basically lets you ‚Äúundo‚Äù a smoothie.. but with math.. ü§Ø  Homework 5: Minimum Spanning Trees  This one is about merging two MSTs together, using an algorithm that is efficient and correct  Minimum Spanning Tree  Homework 6: Modular math and RSA  RSA) is an encryption algorithm. It is how many things are ‚Äúencrypted‚Äù these days Basically, it comes down to the fact that it's really hard to find out the two prime numbers that make up a really big number  Mod.. Now you know RSA!  Project 1: Dynamic Programming  Dynamic programming is a way to break up a problem into a bunch of smaller problems that ‚Äúadd back up‚Äù to the original problem  Take for example, the Fibonacci sequence  What is the nth Fibonacci number?  Recursive (slow) way:  def fib(n):     if n \u003c= 1:         return n     return fib(n-1) + fib(n-2)  Dymanic Programming! (fast way!)  def fib(n):     a = 0     b = 1     if n == 0:         return a     elif n == 1:         return b     else:         for i in range(2, n+1):             c = a + b             a = b             b = c         return b  In this project, you're solving the Knapsack Problem  Project 2: Minmum Spanning Tree w/ Kruskal's Algorithm  Minimum Spanning trees are basically just finding the most direct route from nodes in a graph.  In this project, you'll use Kruskal's algorithm to find the MST  You'll have to compute two things:  Find(p): given the set p, find the root node of the set of nodes Union(u,v): given two sets of nodes, union them into an MST  .png) A Minimum Spanning Tree  Exams  2 Free response questions A prompt, followed by your input for an algorithm that satisfies the prompt  üö® OPINION TIME! üö®  The content in this class is awesome I think this class relies too much on psuedo code Some more real code in this class would be great  Should you take this class?  If you are doing your master's for personal benefit, and just to learn something new, you may like this class's lecture videos  If you are doing your master's to perform well in academia, and kind of like that style of thing, maybe this is the class for you  If you are doing your master's to get your degree, I would suggest taking the Interactive Intelligence route and skipping this class",
  "tags": [
   "Algorithms",
   "OMSCS"
  ],
  "img": "/content/images/georgia-tech-omscs-graduate-algorithms-review-cs-6515/Thumbnail_Grad_Algos-scaled.jpeg"
 },
 "georgia-tech-omscs-human-computer-interaction-review-cs-6750": {
  "href": "georgia-tech-omscs-human-computer-interaction-review-cs-6750",
  "title": "Georgia Tech OMSCS Human-Computer Interaction Review | CS 6750",
  "summary": "Georgia Tech's HCI class! TL;DR  Easy 7 hours a week No coding!  What is Human-Computer Interaction?  Human-Computer interaction is the study of how to get interfaces so well made, that humans don't even notice they're using them  Graded course material  1 Final project     20% of final grade     No programming required 5 Principles (P) assignments     4% of final grade     Easy 5 Method (M) assignments     4% each     Tedious 42 Peer feedbacks!! üíÄ     10% of your grade     uEvery/u assignment, you have to give 3 feedback forms to your peers 2 Exams     Open-note, open-internet     15% each  Final Project  Choose an interface (mobile app, website, laundry machine etc.) that could use some uredesign/u   Ask classmates in surveys or interviews what they do/don't like about the interface   Figure out how to ‚Äúredesign‚Äù the interface (on paper only)  Super easy Just need to follow the rubric on Canvas No programming required!  UI design  P Assignments  Super easy Just have to do some exercises Very interesting  Examples:  Choose an app that has multiple contexts, like Google Maps, analyze it's surroundings What is a good interface you use day to day and why is it good? Select an interface that has bad error handling, what should it do instead?  They are all online you can read them here   My advice is to ufollow the rubric/u on Canvas for each one and you will get 100%  M Assignments  Slightly more tedious than P assignments but similar Can do them in one sitting  Peer feedbacks  3 per assignment Super tedious üíÄ just have to give your feedback to three peers' assignments You can make up for them by participating in surveys  Example feedback I got once Lol  Exams  Open-note, open-lecture videos, open everything! You can do ‚Äúctrl + f‚Äù in required readings while taking the exam  Grade breakdown  Final project - 94% P Assignments - 80% (didn't do 1 üòã) M Assignments - 93% Peer feedbacks - 73% (Lols!) Exams - 89%  Final score: 87% or a B üòé",
  "tags": [
   "HCI",
   "OMSCS"
  ],
  "img": "/content/images/georgia-tech-omscs-human-computer-interaction-review-cs-6750/c-me-p0.jpg"
 },
 "georgia-tech-omscs-knowledge-based-ai-cs-7637": {
  "href": "georgia-tech-omscs-knowledge-based-ai-cs-7637",
  "title": "Georgia Tech OMSCS Knowledge-Based AI | CS 7637",
  "summary": "OMSCS Knowledge-based AI reviewüòé TL;DR  Easy / Medium Avg 12 hours per week Can work ahead in this class  What is Knowledge-Based AI?  Knowledge-based AI models how humans think and reason  Graded course material  1 semester-long project     4 semi-weekly ‚Äúcheck-ins‚Äù 5 ‚Äúmini‚Äù projects     Leet-code-esque problems 3 homework assignments (papers)     Tedious, but not hard 2 Exams  Final Project overview    Update! As of Spring 2025, the final project in this class is now ARC-AGI !  Before: You will be solving Raven's Progressive Matrices using AI !  A simple Raven's Progressive Matrix problem  A more complicated Raven's Progressive Matrx problem  AI is great!  The correct answer above is 8, don't ask me how‚Ä¶  That's why we have AI! üòÖ  Coding  The only code you are given to start out, is how to read in images A, B, C, etc. etc..  The rest, you have to find out in Python (spec)  Strategies  My advice is to use the ‚ÄúAffine and Set Transformation Induction‚Äù model from a paper written by Professor Goel himself  The idea is you flip and rotate the images to see which one of the possible answer images is most similar  It's not very advanced but I was able to get 68/96 puzzles solved with it and still get an A in the class  Check-ins  You have to turn in your code every-other week and solve x number of puzzles  It counts towards your final grade  Mini-projects  Mini-project 1: Wolves and sheep  Get the wolves and the sheep across a river (spec)   However, your boat can only hold 2 animals at a time, and wolves can never outnumber sheep on either side  Recursion is your friend Guess and check (i.e. ‚ÄúGenerate and Test‚Äù in fancy AI vocabulary)  Get the sheep across without the wolves eating them!  Mini-project 2: Block world Given a stack of blocks labled A, B, C, etc., find out how many moves (and which moves) get the blocks to a ‚Äúgoal‚Äù configuration (spec)  Example block world problem  Priority queue is your friend Create a scoring method for ‚Äústates‚Äù of blocks     States with blocks that are already in their goal configuration get a higher ‚Äúscore‚Äù     Blocks that are on the table are higher scoring than blocks that are mis-placed  Mini-project 3: Sentence reading  Given a simple sentence, try to give the correct answer back as a word (spec)  ‚ÄúCarlos is Twelve‚Äù ‚ÄúHow old is Carlos?‚Äù ‚ÄúTwelve‚Äù  Example question in the project (just kidding, it's from The Benchwarmers)  Tougher and more time consuming than most mini-projects so start early Categorize words into adjectives, nouns, verbs etc. etc. Find ‚Äúsubjects‚Äù and ‚Äúobjects‚Äù of sentences Find ‚Äúsubjects‚Äù and ‚Äúobjects‚Äù of sentences  Mini-project 4: Monster identification  Given a bunch of ‚Äúmonsters‚Äù and their attributes, classify a new monster into a category of ‚ÄúTrue‚Äù or ‚ÄúFalse‚Äù (spec)  There are many ways to do this I did a brute force way, but there are probably better ways  Mini-project 5: Monster diagnosis  Given a list of diseases and their vitamin levels (Vitamin A defiiciency -  Alphathalasemium), diagnose a new monster (spec)  You can do this in a lot of ways I did brute force and it worked  Homeworks  3 written homework assignments Pretty easy, just tedious  Exams  The exams are open-note, open-internet   You just can't interact with a live person during it  Grade breakdown  Here's what I got in terms of scores:  Final Project - 80.1% Miniprojects - 96.6% Homeworks - 92.7% Exams - 83.4%  Final score: 90.74% or an A",
  "tags": [
   "AI",
   "OMSCS"
  ],
  "img": "/content/images/georgia-tech-omscs-knowledge-based-ai-cs-7637/KBAI4.jpg"
 },
 "georgia-tech-omscs-machine-learning-for-trading-review-cs-7646": {
  "href": "georgia-tech-omscs-machine-learning-for-trading-review-cs-7646",
  "title": "Georgia Tech OMSCS Machine Learning for Trading Review | CS 7646",
  "summary": " TL;DR  Easy 10 hours a week Great beginner course and interesting course material  What is Machine Learning for Trading?  Machine Learning for Trading is how to use Python to build ML models to best trade!  Graded Course Material  8 Projects     10% of Final Grade each     Python 2 Exams     12.5% of Final Grade each     Closed-book, proctoring on  Project 1: Martingale  In this project you'll simulate an American Roulette wheel  You'll be proving, that in the long run, the House always wins üòè  Python programming Simple statistics You implement Prof. Balch's actual betting strategy when he goes to Las Vegas  The Strategy (Public Docs):  Always bet on black When you win, you reset your bet to $1 When you lose, you double your bet Cap out at $80 in winnings  The whole idea here is to prove that the Expected Value of consecutive rolls, is negative cash   Even though you might win every so often  An European Roulette wheel (you'll us American which has an additional 00 square)  Project 2: Optimize Something  You will find out which stocks are the most valuable to buy! (Looking back in history)  You'll use Scipy's minimize function to do this (Project Specs) You'll implement Sharpe Ratio calculations As well as calculating average daily returns and their standard deviations  Pro tips:  Watch the lecture videos (they are very helpful here) Pandas üêº is your friend! Single-purpose functions are your friend! You can re-use them in later projects  A random stock portfolio  Project 3: Asses Learners  In this project, you will make different ‚Äúlearner‚Äù models, specifically:  Decision tree learner Random tree learner Bag learner (collection of either Decision Tree or Random Tree learners that work together) Insane Learner (collection of Bag learners!)  Decision Tree learners are like ‚Äúif, then‚Äù statements   You give a ‚Äúflow chart‚Äù of what to decide for each input   In the example Decision Tree below, the question is ‚ÄúShould I play Tennis?‚Äù   In our Decision Tree for this class, the question will be ‚ÄúShould I buy this stock?‚Äù  Example Decision Tree  Random trees are Decision Trees, but you decide Randomly which attributes to ‚Äúdecide‚Äù on, i.e. ‚ÄúSplit‚Äù   So in the above example, instead of ‚ÄúSunny‚Äù, ‚ÄúOvercast‚Äù, ‚ÄúRain‚Äù, you might randomly decide to categorize by ‚ÄúTornado‚Äù, ‚ÄúMonsoon‚Äù, ‚ÄúEarthquake‚Äù   In our Decision Tree, we're dealing with stock prices, which are numbers, so you randomly choose which numbers to split on i.e. less than $34, equal to $34 dollars, greater than $34 dollars, where the number $34 was randomly chosen  Bag Learner is just a collection of Decision or Random Tree learners, where each Decision/Random Tree learner votes on what it thinks the answer should be.   You then take either the most common vote, average vote, etc. to give as the final vote  Example Bag learner  Insane learner is just a collection of Bag learners, so the above becomes this:  Example Insane Learner  Project 4: Defeat Learners  For Project 4, you are now altering the datasets, to try and ‚Äútrick‚Äù or ‚Äúdefeat‚Äù one of your learners.   This means, basically, you're showing that you understand how these learners actually work  This builds on Project 3  So make sure you get full points on Project 3  You basically just ‚Äúscript-up‚Äù some random data using numpy, where one generated dataset works best for the linear learner, and the other works best for decision tree.   I won't disclose much about the actual implementation, but just draw on a scatter plot, data (or look them up), that does well for decision tree, and then do the same for linear.  Project 5: Marketsim  In Project 5, you will build a ‚Äúmarket simulator‚Äù, that keeps track of how much money a certain ‚Äúportfolio‚Äù (collection of stocks) will make over time.  Given a list of stocks and their orders (Buy, Sell), and price, you will calculate how much money the person has at the end of the trading season.  Input Date,Symbol,Order,Shares  2008-12-3,AAPL,BUY,130  2008-12-8,AAPL,SELL,130  2008-12-5,IBM,BUY,50   Output 2008-12-3 1000000  2008-12-4 999418.90  2008-12-5 999754.30  The videos go over pretty well actually how to do this, with an in-depth example (370 - Market Simulator)  Project 6: Indicator Evaluation  For Project 6, you'll be making certain ‚ÄúIndicators‚Äù, of how ‚Äúgood‚Äù a stock is to buy.   Some examples are:  Simple Moving Average (SMA) Percent B Momentum  After you implement code that evaluate's a stock's indicator health, you then run a simulation of a stock, and plot the indicator's value over time  This project includes both coding, and a written report  It's a little bit tedious and takes more time than other labs, just to get the report right (I did not apparently haha, see grades below)  Project 7: Q-Learning  Randomly, for Project 7, you will implement a Q-Learning robot?? ü§∑üèª‚Äç‚ôÇÔ∏è  Not sure why, but anyways, Q-Learning is basically just:  What state am I (robot) in? What actions are available to me? Take an action, get a reward üç™  Now the lectures go over this pretty well I think, but I just happened to have already taken Reinforcement Learning (CS 7642), and basically just used my old code.  This class's implementation of Q-learning was definitely simpler than Reinforcement Learning's, so it did not take long.  Check out what I did in Reinforcement Learning though!  Project 8: Strategy Evaluation  In the last, and final, project in ML4t, Project 8, you will actually code a STOCK TRADING ROBOT üò±  Your stock-trading robot  You will implement 2 ‚ÄúStrategies‚Äù:  Manual strategy (what you can make with your indicators, like is EMA good today? BUY) Learner strategy (using either Q-learning, decision tree, or linear learner from previous projects)  It was actually really cool!!  Manual strategy for me worked better than the benchmark strategy (buy and hold)  I also had fun making the decision tree learner work with stock buying/selling  All-in-all, pretty cool project  Extra-credit: Holy Hand Grenade of Antioch  I have no idea what this is about, other than the name reminds me of the Holy Hand Grenade in the video game, Worms (lols)  Exams  Midterm:  30 multiple choice questions 35 minutes There's a study guide and practice exam here  Final (non-cumulative):  Same exact thing here  Grade breakdown  Project 1: 100% üòé Project 2: 100% üòé Project 3: 86% üò≤ Project 4: 100% üòé Project 5: 100% üòé Project 6: 65% ü§¨ üòÑ Project 7: 95% ü§∑üèª‚Äç‚ôÇÔ∏è Project 8: 92% üå¥ Exam 1: 76% üí™ Exam 2: 80% üòé  Final score: 87.6% or a B üòé",
  "tags": [
   "Machine Learning",
   "OMSCS"
  ],
  "img": "/content/images/georgia-tech-omscs-machine-learning-for-trading-review-cs-7646/thumbnail.jpeg"
 },
 "georgia-tech-omscs-machine-learning-review-cs-7641": {
  "href": "georgia-tech-omscs-machine-learning-review-cs-7641",
  "title": "Georgia Tech OMSCS Machine Learning Review | CS 7641",
  "summary": "Georgia Tech's ML class  Summary of this class  TL;DR  Extremely difficult 20-25 hours per week on average Enormous curve, 40% got me a B  Quick tips  You don't need the textbook     If you're interested in the theory go for it, but it doesn't help much for assignments Can work ahead in this class  What is Machine Learning?  Machine learning is getting computers to make decisions without being explicitly programmed to  Graded course material  2 Exams     Closed-notes     Each exam is worth 25% of your final grade     Difficulty level: Medium, they ask open-ended questions, and all answers can be found in the lectures (watch them for sure) 4 Projects     Difficulty level: Medium     Tedium level: Hard         I say this because they are very ‚Äúrun these 20 experiments‚Äù-esque, which just takes forever to code     Writeups: The writeups are very heavily scrutinized, and need to be really well written         45/100 was my average score for writeups         uCode is not king/u in this class, writeups are üëë  Project overview  Supervised Learning  This assignment in particular has you use any code package/library to ‚Äúimplement‚Äù the following:  Decision trees with pruning Neural nets Boosting Support Vector Machines k-nearest neighbors  **PRO TIP Use packages like pytorch, or Weka to do the heavy lifting for you   You do not need to code everything from scratch (it even says so in the project spec)  15% of your grade  Find 2 interesting classification datasets:     Can be from anywhere, as long as they are non-trivial and not overly-complex         University of California-Irvine has some cool public datasets         Mine were an MLB baseball statistics dataset, to try and predict the MLB world series winner         And an obesity dataset, where you try to guess the obesity level of a person given life characteristics     At least 1 should be large         Mine had 112 and 2000+ records respectively     You will use these in project 3 for:         K-means         Independent Component Anlaysis (ICA)         Insignificant Component Analysis (PCA)  PRO TIP At least one dataset with more than 2 output classes is best for K-means, ICA and PCA  Writeup tips:     Analyze the ubehavior/u of the models         Don't just print the results, really go in-depth here         Why did the models behave the way they did?     Analyze your datasets in-depth         How often do output classes occur?         Is there any correlation between variables and output classes?         What's different about each set what are the challenges with each set?     Metrics         Why did you use the error metric that you used?         Were there other error metrics you looked at?  PRO TIP Use a fancy paper template to write your paper, it will get you more points  Randomized Optimization  This project is very time consuming, because you run a total of 16 experiments  10% of your grade  Here you will experiment with:  Randomized hill climbing Simmulated Annealing Genetic Algorithms MIMIC  PRO TIP Watch the lecture videos for this section to understand the algorithms   They are explained very well in the videos, and MIMIC is Dr. Isabell's graduate thesis  Find 3 problems     Bit-string* representation problems are your friend, such as 4-peaks and k-colors Going back to project 1     You will use:         Randomized hill climbing         Simulated Annealing         Genetic algorithm     to train weights for the neural network from project 1 (Supervied Learning)         This part was honestly the most confusing, and I suggest doing it first, because it took the longest Writeup tips     Discuss hyper-parameter tuning     Discuss gradient descent performance  Unsupervised Learning   Insanely utedious/u, you do 20 experiments so ‚ùóÔ∏èstart early‚ùóÔ∏è  2 clustering algorithms:     k-means clustering     Expectation Maximization  4 dimensionality algorithms     PCA     ICA     Randomized Projections     Any other feature selection algorithm you want  You'll apply the 2 clustering algorithms to your 2 datasets, then, for each new clustering, you'll apply all 4 dimensionality reduction algorithms.  So 2 x 2 x 4 = 16 üò±  Then, you'll run some stuff on your neural network from project 1 again  So 16 + 4 = 20 experiments total  Then you have to write about all of them ü•≤  I have no advice, other than start early  I got 23/100 so good luck!!  Markov Decision Processes  This one is the most fun in my opinion  Markov Decision Processes is taking stat-action pairs, and training agents to do a task  Lunar Lander is one example of an MDP, but you won't do that in this class  CS 7642 Reinforcement Learning you do  Lunar Lander is an MDP  Find 2 MDP problems     Not overly complicated     One ‚Äúsmall‚Äù and one ‚Äúlarge‚Äù         I did Cart-pole and Taxi Value iteration vs policy iteration     To this day I don't remember the difference     But you do both on the problems Reinforcement learning algorithm     Q-Learning is one popular choice  *PRO TIP** If you're low on steam, I would invest more energy into this project, as it's 15% of your grade and the most fun in my opinion  Writeup tips:     Graph value and policy iteration convergence side-by-side somehow, either through time spent, iterations spent etc.     Do value and policy iteration come to same answer? Why or why not?     How do the sizes of the problem affect the algorithms?  Closing statement  While this class is tough, you can definitely get a B if you stick with it  Don't worry if you're getting 30's/40's/50's on assignments, just do your best and it will be okay üôÇ",
  "tags": [
   "Machine Learning",
   "OMSCS"
  ],
  "img": "/content/images/georgia-tech-omscs-machine-learning-review-cs-7641/ML2.jpg"
 },
 "georgia-tech-omscs-reinforcement-learning-review-cs-7642": {
  "href": "georgia-tech-omscs-reinforcement-learning-review-cs-7642",
  "title": "Georgia Tech OMSCS Reinforcement Learning Review | CS 7642",
  "summary": "Georgia Tech's Reinforcement Learning class! TL;DR  Hard 20 hours per week Big Curve üìâ (68% == B for me)  What is Reinforcement Learning?  Reinforcement Learning is getting your program to make tiny ‚Äúupdates‚Äù, based on rewards it gets in a ‚Äúworld'  My Lunar Lander Lols  Graded Course Material  6 Homeworks (5% each) 3 Projects (15% each) 1 Exam (25%!)  Homework 1: Planning in Markov Decision Processes  The goal is to find the Expected Value of ‚Äúpoints‚Äù, you would earn, given an N-sided dice, where some of the sides give you points, and some end the game  You are given some of the context in these lecture videos, but I think the most helpful place is Chapter 3 of the book.  It's basically just a python script, where you fill in 1 function that does something, and uses Policy-Iteration in Reinforcement Learning.  Policy Iteration, from the book  Homework 2: The ∆õ Return  You're implementing an ‚Äúupdate‚Äù step for ‚ÄúTemporal Difference Learning‚Äú  It's basically just a function that you implement in Python, that follows the Temporal Difference algorithm in the book:  In this equation, you're basically going to solve for ∆õ (lambda)  The Temporal Difference algorithm in the book  I was struggling to get it until I figured this out  Project 1: Temporal-Difference ∆õ  This one is a lot of reading. You have to read the ‚ÄúSutton Paper‚Äù from 1988 (it's the original Reinforcement Learning paper basically) and replicate the experiments and results as closely as possible  Then you have to write your own paper (use the IEEE Paper format)  Temporal Difference is basically looking at patterns up until a certain point, and capturing the ‚Äúroll‚Äù of the data.   If you were trying to predict the weather, you would take into account, how the weather has changed over many days, instead of just looking at yesterday's weather.  The paper this project is based on  Homework 3: SARSA  SARSA is another ‚Äúupdate‚Äù model for Reinforcement Learning   It stands for:  State Action Reward State Action  In this homework, you're an agent, trying to traverse OpenAI's Frozen Lake problem, using SARSA  OpenAI's Frozen Lake problem on meth  SARSA algorithm  Homework 4: Taxi (Q-Learning)  Q-Learning is just another ‚Äúupdate‚Äù algorithm for Reinforcement Learning  In this homework, you'll be implementing a Taxi problem that OpenAI implements for Reinforcement Research  The goal is to pick up the person and drop him/her off at the desired location, with the minimal steps possible It's pretty amazing! The Q-Learning algorithm just learns which action is best to take in each given scenario  In this homework, you'll be dealing with a finite-space Q-Learning environment, where the Q-table is a 2-dimensional matrix, of (state x action)  This gets harder in the next lab which is an infinite state space! üò±  Open AI's Taxi problem  Project 2: Lunar Lander üò±  This one's pretty cool though, because you'll get to make a little ‚Äúrobot‚Äù that will fly around and try to land in a goal via OpenAI's LunarLander in Project  It's a toughie no doubt, but is super cool once you get it working.   My suggestion would be:  Start as simple as possible (keep parameters constant and training short, and watch your lander) Keep first training episodes low, so you can watch the learning happen faster Tune parameters last, after getting a solid base  I used a Deep-Q Network because it was used to solve Atari games using an infinite state space, which mapped nicely to this project  I also used the IEEE Paper format for this project, which got me more points for a more professional look, and will likely get you one too.  My Lunar Lander  Homework 5: Bar Brawl üëäüèº  Given a 2-dimensional array which represents townspeople's attendance to a bar each evening, you are to find out how likely it is that a fight broke out that evening.  This closely follows a paper called ‚ÄúKnow what it knows: A framework for self-aware learning‚Äú  It's kind of just math and a few for-loops  Homework 6: Rock, Paper, Scissors ü™® üìÑ‚úÇÔ∏è  This one explores Game Theory using Rock, Paper, Scissors  I remember it was very small coding-wise, but also kind of tricky to get just right  They provide you with some papers to look at and compare with  Project 3: Correlated-Q ‚öΩÔ∏è  In this project you'll implement a soccer game (yay) and write a paper about it  You just kind of switch out the algorithms used to play the game, and compare the results  It's pretty interesting but a little time consuming  Final Exam  The final exam was really hard  I got 31/100 on it, and still managed to get a B in the class  It is free-response  Grade breakdown  Homework 1: 100% Homework 2: 100% Project 1: 63% Homework 3: 100% Homework 4: 100% Project 2: 76% Homework 5: 100% Homework 6: 100% Project 3: 65% Final Exam: 31%",
  "tags": [
   "Machine Learning",
   "OMSCS"
  ],
  "img": "/content/images/georgia-tech-omscs-reinforcement-learning-review-cs-7642/Thumby-scaled.jpeg"
 },
 "georgia-tech-omscs-software-development-process-review-cs-6300": {
  "href": "georgia-tech-omscs-software-development-process-review-cs-6300",
  "title": "Georgia Tech OMSCS Software Development Process Review | CS 6300",
  "summary": "Software development class at Georgia Tech TL;DR  Very nice! üëçüèº Very relevant material 7 hours per week Only 1 group project (which isn't too bad)  What is Software Development?  Software development is basically just the process in which you build applications/websites/tools using code  Graded Course Material  6 Assignments (Individual) 1 Group Project 1 Individual project  Assignment 1: Team Matching Survey  This is just a quick survey about what times of the week you like to work on school projects, what experience you have developing, and any other information you would like the TAs to know about yourself before they match you up with 3 other classmates  Teamwork!!  Assignment 2: Git usage!  This one rocks:  You actually clone a repository, and begin making changes to it as if you were working with others on a project This is SUPER relevant to today's software engineering, as Git is basically the heart of all software engineering. You explore merging, committing and tagging  Gihtub sneak peek  Assignment 3: Basic Java  You make a simple Java application that ‚Äúencrypts‚Äù messages You'll also end-up re-using this code on later so take some time to do it well You also make some unit tests  Not Java, but pretty fancy looking  Assignment 4: Android app  Here you make an Android app, that is the frontend of what you coded in Assignment 3 It does not need to be fancy  Android  Assignment 5: Software Design  Here you use UML to design a ‚ÄúJob search‚Äù application You'll end up re-using this in the Group Project so actually think about it  Planning  Assignment 6: White-box testing  You'll solve these unit test ‚Äúpuzzles‚Äù related to:     Statement coverage     Branch coverage     Modified Condition/ Decision Coverage It's kind of tricky!  Testing  Group Project üò±  In this project, you are random paired with 3 other classmates to create a Job Comparison App:  A user should be able to enter a job offer A user should be able to compar job offers A user should be able to change the job comparison algorithm weights  You do it over 5 weeks so it's not too bad  Group project time!!  Individual Project ü•∑üèª CLI tool  Here you'll develop a command-line tool that alters text in a file:  There are flags you can pass into the tool like -d (duplicate) or -k (keep lines that match) as an example You're supposed to program the tool to actually do what the specs say, and test it well enough This is actually super relevant to what you do in industry  Hello, world!  txter -d 1 helloworld.txt  Hello, world! Hello, world!  Command line  Grade breakdown  Assignment 1: 100% üòé Assignment 2: 100% üíØ Assignment 3: 100% üî• Assignment 4: 100% üôåüèº Assignment 5: 100% ‚ùóÔ∏è Assignment 6: 80% ü§∑üèª‚Äç‚ôÇÔ∏è Group project collab grade: 99.5% üòé Group project overall: 92.6% ü§∑üèª‚Äç‚ôÇÔ∏è Individual project overall: 94.4 üî• Participation: 100%  Overall grade: A üòé",
  "tags": [
   "Development",
   "OMSCS"
  ],
  "img": "/content/images/georgia-tech-omscs-software-development-process-review-cs-6300/Thumby_SDP-scaled.jpeg"
 },
 "install-certs-on-nanoserver": {
  "href": "install-certs-on-nanoserver",
  "title": "Install Certs on Nanoserver",
  "summary": "Installing certificates on a nanoserver docker image   Source code  What is Nanoserver?  Nanoserver is a light-weight Windows Docker container, great for containerizing Windows applications.  What is a Certificate?  A certificate is a way for a server to verify that the client making the request is legitimate.  Here we will be using a .pfx certificate generated through Azure Key Vault  The Code  The code for this can be found in the below NanoserverInstallCert.ps1 file and Dockerfile.  NanoserverInstallCert.ps1 param(     [Parameter(Mandatory,Position=0)]     [string]$PfxFile,     [securestring]$PfxPass,     [string]$StoreName = 'LocalMachine',     [string]$StoreLoc = 'My' )  Write-Host (\"Installing cert file {0} to Cert:\\{1}\\{2}\" -f $PfxFile, $StoreName, $StoreLoc) $pfx = New-Object Security.Cryptography.X509Certificates.X509Certificate2($PfxFile, $PfxPass) $store = New-Object Security.Cryptography.X509Certificates.X509Store($StoreLoc,$StoreName) $store.Open(\"MaxAllowed\") $store.Add($pfx) $store.Close()  Dockerfile Use Nanoserver as a base image (with powershell installed) FROM mcr.microsoft.com/powershell:lts-nanoserver-1809  Run as admin USER ContainerAdministrator  Make default shell powershell SHELL [\"pwsh\", \"-command\"]  Make a directory to store copy of cert WORKDIR C:\\\\certs  Copy cert to container COPY certsonnanoserverkv-dummycert-20220730.pfx .  Copy cert installation script to container COPY NanoserverInstallCert.ps1 .  Run cert installation script in container RUN .\\NanoserverInstallCert.ps1 -PfxFile .\\\\certsonnanoserverkv-dummycert-20220730.pfx -StoreName \"\"\"LocalMachine\"\"\" -StoreLoc \"\"\"My\"\"\"  Verify that the cert was installed on the container RUN Get-Childitem Cert:\\LocalMachine\\My  Remove copy of cert from container RUN Remove-Item certsonnanoserverkv-dummycert-20220730.pfx  Running the code  On a Windows machine with Docker installed, run the following to actually do the demo:  docker build -t cert:test -f .\\Dockerfile .  Successful installation of a dummy cert on Nanoserver",
  "tags": [
   "Docker",
   "Windows"
  ],
  "img": "/content/images/install-certs-on-nanoserver/shield.jpg"
 },
 "install-wireshark-via-windows-command-line": {
  "href": "install-wireshark-via-windows-command-line",
  "title": "Install Wireshark via Windows Command Line",
  "summary": "Install wireshark via cmd Here we will install Wireshark via the Windows cmd line.  This is especially useful if you only have terminal access to your machine  Download installer  Via Powershell, run the following command to download the 32 bit Wireshark installer  See the full list of downloadables here  Start-BitsTransfer -Source https://1.as.dl.wireshark.org/win32/Wireshark-win32-3.6.1.exe  Run the installer  Run the installer with  .\\Wireshark-win32-3.6.1.exe  Click ‚ÄúNext‚Äù or ‚ÄúContinue‚Äù all the way through changing no settings  You will also see a ‚ÄúNpcap‚Äù installation window, click ‚ÄúI Accept‚Äù or ‚ÄúContinue‚Äù all the way through  Run Wireshark installer  Npcap will come up too, click ‚ÄúI Agree‚Äù and ‚Äúcontinue‚Äù through all default settings  Run Wireshark  In your Powershell terminal, type taskmgr to open Task Manager  Click More details   File   Run new task  Then type wireshark and hit enter, you're done!  You've done it!",
  "tags": [
   "Networking",
   "Windows"
  ],
  "img": "/content/images/install-wireshark-via-windows-command-line/Wireshark_icon.svg.png"
 },
 "installing-modules-for-powershell-core-pwsh": {
  "href": "installing-modules-for-powershell-core-pwsh",
  "title": "Installing Modules for Powershell Core (pwsh)",
  "summary": "Installing powershell modules with `pwsh`   Source code  What is Powershell Core (pwsh) ?  Powershell Core is a cross-platform version of Powershell.  It is meant to run on Linux, Windows and MacOs  More info here: Powershell Core Docs  Install Powershell Core (pwsh)  Here will we run Powershell Core in a Docker Container readily available by Microsoft.  mcr.microsoft.com/powershell:lts-nanoserver-1809 is a docker image readily available on Microsoft's Docker Hub which already has Powershell Core installed.  We will be using this image as a base container image in a Dockerfile later on.  Browse Powershell Core Modules  Next you can head over to the Powershell Gallery to find which Powershell Moduels are available for download.  Here we will be installing the DnsClient-PS module to resolve DNS names.  DnsClient-PS in the Powershell Gallery  Install a Module  Here we have created a Dockerfile with a list of commands to both use the mcr.microsoft.com/powershell:lts-nanoserver-1809 container image and install the DnsClient-PS module.  To build the docker image, simply run:  docker build -t dns-module:v1.0.0 -f Dockerfile .  Use a readily available powershell core docker image by Microsoft as base FROM mcr.microsoft.com/powershell:lts-nanoserver-1809  Run as admin USER ContainerAdministrator  Make default shell powershell SHELL [\"pwsh\", \"-command\"]  Label powershell gallery as trusted RUN Set-PSRepository -Name PSGallery -InstallationPolicy Trusted  Add ContainerAdministrator's powershell module location to PSModulePath RUN setx /M PSModulePath $($env:PSModulePath + 'C:\\Users\\ContainerAdministrator\\Documents\\PowerShell\\Modules')  Install powershell core dns module DnsClient-PS RUN Install-Module -Name DnsClient-PS -SkipPublisherCheck -RequiredVersion 1.0.0  Run a simple command on startup ENTRYPOINT [ \"Resolve-DNS\", \"www.microsoft.com\" ]  Building the docker image which has Powershell Core in it as well as the DnsClient-PS module in it  Furthermore, to run Powershell Core interactively inside the Docker container itself, run:  docker run -it --entrypoint pwsh dns-module:v1.0.0  Running Powershell Core interactively and using the DnsClient-PS module",
  "tags": [
   "Docker",
   "Powershell",
   "Windows"
  ],
  "img": "/content/images/installing-modules-for-powershell-core-pwsh/pwsh.png"
 },
 "is-georgia-techs-online-masters-worth-it": {
  "href": "is-georgia-techs-online-masters-worth-it",
  "title": "Is Georgia Tech‚Äôs Online Master‚Äôs Worth It? #OMSCS",
  "summary": "Is the OMSCS actually worth it? Cost  The whole thing only costs $,8000!   I'm talking books, tuition, fees, everything for the whole program   Compare that to UC Berkeley's Master's in Data Science where 1 semester costs $16,000  Here's a spreadsheet with the details compared  Different master's programs compared  Flexibility  Are allowed to skip 2 semesters sequentially, without re-applying to the program   That being said, you should be careful not to go that point too often   It will just take you longer to finish the program (theoretically, you could take 10 years to finish if you wanted to haha)  The average time it takes students to finish the program is actually about 10 semesters (so a little over 3 years)  Email from Dr. Joyner describing new price points of the OMSCS  Here's a course planner I made about how to schedule my classes while I was in the program  My own course planner  Online  This program is completely online, no need to go in ever to Atlanta, not even for graduation if you don't want to haha   Your degree also will not have \"online\" on it at all  Diploma-in it up  Work-life-school üòã balance  I did this whole program while working full time   It is definintely hard, but do-able!   Try it out, it is honestly ok if you just want to take 1 class at a time, to just make sure you are keeping up with other areas of your life    Content  Well you're here reading this blog so you must know by now I've made a ton of articles and videos about the OMSCS  I personally thought it was a great program, there was a lot to learn, and really smart people doing it alongside you  I felt like I was able to learn a lot just by being around my classmates (virtually of course), and it honestly felt like just as good as my undergrad, if not better, because I had to learn this all myself (no help from classmates in person etc., though you can always ask questions on EdStem boards and what not, it just forces you to read, reason and think clearly more haha)  Specializations  There are now 6 specializations at the OMSCS:  The 6 specializations for the OMSCS  Thesis?  You actually totally can do a thesis (see my video with Dr. Joyner) in the program   You just need to get started on that right as you start the program, and pair up with a professor who is willing to do it with you  Worth it?  This is such an amazing program!!! And it's so affordable!!! And so flexible!!!   You should definitely consider doing the program.",
  "tags": [
   "OMSCS"
  ],
  "img": "/content/images/is-georgia-techs-online-masters-worth-it/Presentation1.jpg"
 },
 "omscs-tier-list": {
  "href": "omscs-tier-list",
  "title": "Georgia Tech OMSCS Tier List Class Review",
  "summary": "Ranking my OMSCS classes in tier-list fashion üòé Criteria    The critera are:  How well-presented is the class? How hands-on is the class? What are the class mechanics like?  The classes I took  Knowledge-based AI Reinforcement Learning Robotics Machine Learning for Trading Machine Learning AI Computer Networks Human-Computer Interaction AI, Ethics and Society 10. Grad Algos 11. Software Development Process  Knowledge-based AI  Well-presented?     Yes, of course, it's a Joyner class! Hands-on?     Yes, it's actually quite a lot coding, and has some really cool projects Class mechanics     Yes, very well organized Tier? A  Reinforcement Learning  Well-presented?     Yes, it is well presented (although very tough stuff!) Hands-on?     Sort-of hands on. Alot more reading than coding/building in this class Class mechanics     Yes, great interaction with the TAs on EdStem, however, grading was very subjective and slow to get back to the students Tier? B  Robotics  Well-presented?     Yes!! This class rocks!!     It was very cool videos and stuff, really neat stuff. Hands-on?     Yes, you do a bunch of cool projects in this class Class mechanics     Nothing to write home about, but still pretty good Tier? S  Machine learning for trading  Well-presented?     Yes, it is a bit slow in the content (it's tough but also, I think simplified for our beginning status as students in stock trading haha) Hands-on?     Yes, you actually do a lot of coding and building in this class Class mechanics     Good Tier? B  Machine learning  Well-presented?     Very well presented content Hands-on?     Tedium honestly, not super hands-on it felt.     Felt like a lot of busy work Class mechanics     Pretty ambiguous and mysterious grading! Good luck! Tier? C  AI  Well-presented?     Yes! It was super cool Hands-on?     Yes!! Super intense programming here! Seriously, tough programming. Class mechanics     Yes there was actually the most feedback and participation from any of the other clases. (Maybe beacause it's so hard, students just had to come together to get through it üò≠üòÇ) Tier? A  Computer networks  Well-presented?     Yes, it was a bit dry sometimes (I mean the topic itself can be dry haha) Hands-on?     Yes, there was actually 1 really good lab (the first), that was relevant to networking (I use it in my job as a networking engineer) Class mechanics     Yeah Tier? B  Human-computer interaction  Well-presented?     Yeah, it's interesting, but pretty simplistic/obvious Hands-on?     You do a lot of writing in this class, but it is pretty busy work-y. Mostly writing papers. Class mechanics     Yeah there's a lot of support for students in this class (it's a Joyner class) Tier? C  AI, Ethics and Society  Well-presented?     Yeah I think so Hands-on?     A bit fluffy Class mechanics     Yeah pretty chill Tier? C  Graduate Algorithms  Well-presented?     Well I didn't finish it so üòÇ but the lecture videos were actually really cool Hands-on?     It used to not be, but I have heard it is getting better.      Class mechanics     Not great at all üòÇ (well sort of, like a \"C\" level) Tier? D  Software Development Process  Well-presented?     Yeah, it actually was Hands-on?     Yes, the way you do the group project is very similar to how you do real software-engineering Class mechanics     Yeah it did feel like TAs/professors did get back Tier? A  The final Tier-List made by yours truly  ",
  "tags": [
   "OMSCS"
  ],
  "img": "/content/images/omscs-tier-list/tier-thumbnail5.jpg"
 },
 "reference": {
  "href": "reference",
  "title": "Reference post",
  "summary": "This is my first blog post Author's note: This is just my first blog post, testing out all the features in one post. Jump to What now?  ---  This is a header  And code two lines after it ey yo whats up    Sometimes people ask me, why am I so cool?     Then I answer, just cuz  What now?  Let's say we have a model Product that can render [1] a public-facing API resource for itself by implementing #render. I'll be talking about API resources a lot because that's what I'm used, but keep in mind that this could also be an object that's used to render an HTML view and all the same concepts apply. class Product \u003c ApplicationRecord   belongsto :owner # needs to lazy load an owner    def render     {       id:          self.id,       name:        self.name,       ownerid:    self.ownerid,       owneremail: self.owner.email,     }   end end  This is a link  This is a relative link  Some puppies  [1] I realize that REST is designed to provide much greater     facilities in the form of discovery and content     negotiation, but in practice these just don't see a lot     of use, which is why I normally say that convention is     REST's strongest attribute. Google.com is where I go code it up",
  "tags": [
   "Test"
  ],
  "img": "/content/images/reference/pexels-photo-1108099.jpeg"
 },
 "windows-hostprocess-pod-failed-to-get-application-name": {
  "href": "windows-hostprocess-pod-failed-to-get-application-name",
  "title": "Windows HostProcess Pod: ‚Äúfailed to get application name from commandline: failed to find executable‚Äù",
  "summary": "The elusive `failed to get application name from commandline` error Error: failed to start containerd task \"hostprocesspod\": failed to get application name from commandline \"/usr/local/bin/app.exe\": failed to find executable \"/usr/local/bin/app.exe\": unknown  Here we will find out what causes this mysterious ‚ÄúFailed to find application name from commandline‚Äù error when launching a Windows HostProcess Pod    Source code  Create a Windows HostProcess Kubernetes cluster  To create a Windows HostProcess capable Kubernetes cluster we will use AKS-Engine  The make-aks-engine-cluster.ps1 script along with the win-hostprocess-cluster.json file does this for you, all you need to provide is a valid subscriptionid.  The key thing to note in win-hostprocess-cluster.json is the --feature-gates flag set to WindowsHostProcessContainers=true which allows this cluster to host HostProcess pods.  $SUBSCRIPTIONID='' $CLUSTERNAME='win-hostprocess-cluster' $LOCATION='westus2' $APIMODEL='win-hostprocess-cluster.json'  Creates the resource group which will house your cluster az group create --subscription $SUBSCRIPTIONID --location $LOCATION --name $CLUSTERNAME  Creates an Azure Service Principal to let AKS-Engine deploy resources (your cluster) to your resource group $AZSP=az ad sp create-for-rbac --name win-cluster-service-principal --role=\"Owner\" --scopes=\"/subscriptions/$SUBSCRIPTIONID/resourceGroups/$CLUSTERNAME\" -o json | ConvertFrom-Json $CLIENTID=$AZSP.appId $CLIENTSECRET=$AZSP.password  Let azure permissions propogate before creating cluster Start-Sleep -Seconds 180  Create a hostprocess capable kubernetes cluster using AKS-Engine .\\aks-engine deploy `     --subscription-id $SUBSCRIPTIONID  `     --client-id $CLIENTID `     --client-secret $CLIENTSECRET `     --resource-group $CLUSTERNAME `     --dns-prefix $CLUSTERNAME `     --location $LOCATION `     --api-model $APIMODEL `     --force-overwrite  {     \"apiVersion\": \"vlabs\",     \"properties\": {         \"orchestratorProfile\": {             \"orchestratorType\": \"Kubernetes\",             \"orchestratorRelease\": \"1.23\",             \"kubernetesConfig\": {                 \"networkPlugin\": \"azure\",                 \"apiServerConfig\": {                     \"--feature-gates\": \"WindowsHostProcessContainers=true\"                 },                 \"kubeletConfig\": {                     \"--feature-gates\": \"WindowsHostProcessContainers=true\"                 },                 \"containerRuntime\": \"containerd\",                 \"windowsContainerdURL\": \"https://github.com/kubernetes-sigs/sig-windows-tools/releases/download/windows-containerd-nightly/windows-containerd.tar.gz\",                 \"loadBalancerSku\": \"basic\"             }         },         \"masterProfile\": {             \"count\": 1,             \"vmSize\": \"StandardD2v2\",             \"availabilityProfile\": \"AvailabilitySet\",             \"platformUpdateDomainCount\": 1         },         \"agentPoolProfiles\": [             {                 \"name\": \"windowspool\",                 \"count\": 1,                 \"vmSize\": \"StandardD8sv3\",                 \"availabilityProfile\": \"VirtualMachineScaleSets\",                 \"osType\": \"Windows\",                 \"enableVMSSNodePublicIP\": true             }         ],         \"windowsProfile\": {             \"adminUsername\": \"azureuser\",             \"adminPassword\": \"password1234$\",             \"sshEnabled\": true,             \"enableAutomaticUpdates\": true,             \"WindowsPublisher\": \"microsoft-aks\",             \"WindowsOffer\": \"aks-windows\",             \"WindowsSku\": \"2019-datacenter-core-ctrd-2108\",             \"imageVersion\": \"17763.2061.210830\"         },         \"linuxProfile\": {             \"adminUsername\": \"azureuser\",             \"ssh\": {                 \"publicKeys\": [                     {                         \"keyData\": \"\"                     }                 ]             }         }     } }  Creating a Windows HostProcess capable Kubernetes cluster using AKS-Engine  Containerize a simple go-lang application  Next we will ‚Äúcontainerize‚Äù a simple go-lang application  Check out the source code for file placement but essentially, you just run this docker command with the Dockerfile one directory above app.go:  docker build -t winhostprocessfailedtofindexecutable:v1.0.0 -f Dockerfile .  Use golang image to build binary FROM golang:1.17 AS builder  Make a working directory WORKDIR /usr/local/app  Copy the source code into the container COPY src/ .  Build the app RUN go build app.go  Copy the app binary into the final container image FROM mcr.microsoft.com/windows/nanoserver:1809 COPY --from=builder /usr/local/app/app.exe \\     /usr/local/bin/app.exe  ENTRYPOINT [\"/usr/local/bin/app.exe\"]  package main  import ( \t\"fmt\" \t\"time\" )  func main() { \tfmt.Println(\"Hello from the HostProcess pod!\")  \t// Sleep \ttime.Sleep(1  time.Hour) }  Containerize the simple go-lang app using Docker  Launch the HostProcess pod: ‚Äúfailed to get application name from command line‚Äù fixed  This error is so mysterious.  The fix is simple.  HostProcess pods are run as Windows host processes, so they inherit the same file structure as the Windows host.  That means, if in your Dockerfile you specified the entrypoint of the app as an absolute file path like I did i.e. /usr/local/bin/app.exe, then the HostProcess pod will try to find that executable on the Windows host but it can't.  To get around this, you need to use the %CONTAINERSANDBOXMOUNTPOINT% environment variable in an command field in your deployment yaml like so:  apiVersion: v1 kind: Pod metadata:   name: hostprocesspod spec:   nodeSelector:     kubernetes.io/os: windows   securityContext:     windowsOptions:       hostProcess: true       runAsUserName: \"NT AUTHORITY\\\\Local service\"   hostNetwork: true   containers:   name: hostprocesspod     image: coolstercodes.azurecr.io/winhostprocessfailedtofindexecutable:v1.0.0     command: [\"%CONTAINERSANDBOXMOUNTPOINT%/usr/local/bin/app.exe\"]  Now you should be able to launch your pod seamlessly like so:  kubectl --kubeconfig .\\_output\\win-hostprocess-cluster\\kubeconfig\\kubeconfig.westus2.json apply -f hostprocesspod.yaml  Successfully launching the HostProcess pod, you did it!*",
  "tags": [
   "Kubernetes",
   "Windows"
  ],
  "img": "/content/images/windows-hostprocess-pod-failed-to-get-application-name/error.jpg"
 },
 "windows-hostprocess-pod-host-file-access": {
  "href": "windows-hostprocess-pod-host-file-access",
  "title": "Windows HostProcess Pod Host File Access",
  "summary": "Mountins a Windows filesystem from within a pod Here we will mount a file from the underlying host, into a Windows HostProcess pod on Kubernetes.  HostProcess pods are great for privileged access to host files without manual permissions changes.    Source code  Create a HostProcess capable Kubernetes cluster  First we will create a HostProcess capable Kubernetes cluster in Azure using AKS-Engine  Simply run make-aks-engine-cluster.ps1 with hostprocess-cluster.json in the same directory, providing a valid subscriptionid.  $SUBSCRIPTIONID='' # Provide a valid subscription id $CLUSTERNAME='hostprocess-cluster' $LOCATION='westus2' $APIMODEL='hostprocess-cluster.json'  Creates the resource group which will house your cluster az group create --subscription $SUBSCRIPTIONID --location $LOCATION --name $CLUSTERNAME  Creates an Azure Service Principal to let AKS-Engine deploy resources (your cluster) to your resource group $AZSP=az ad sp create-for-rbac --name win-cluster-service-principal --role=\"Owner\" --scopes=\"/subscriptions/$SUBSCRIPTIONID/resourceGroups/$CLUSTERNAME\" -o json | ConvertFrom-Json $CLIENTID=$AZSP.appId $CLIENTSECRET=$AZSP.password  Let azure permissions propogate before creating cluster Start-Sleep -Seconds 180  Create a hostprocess capable kubernetes cluster using AKS-Engine .\\aks-engine deploy `     --subscription-id $SUBSCRIPTIONID  `     --client-id $CLIENTID `     --client-secret $CLIENTSECRET `     --resource-group $CLUSTERNAME `     --dns-prefix $CLUSTERNAME `     --location $LOCATION `     --api-model $APIMODEL `     --force-overwrite  {     \"apiVersion\": \"vlabs\",     \"properties\": {         \"orchestratorProfile\": {             \"orchestratorType\": \"Kubernetes\",             \"orchestratorRelease\": \"1.23\",             \"kubernetesConfig\": {                 \"networkPlugin\": \"azure\",                 \"apiServerConfig\": {                     \"--feature-gates\": \"WindowsHostProcessContainers=true\"                 },                 \"kubeletConfig\": {                     \"--feature-gates\": \"WindowsHostProcessContainers=true\"                 },                 \"containerRuntime\": \"containerd\",                 \"windowsContainerdURL\": \"https://github.com/kubernetes-sigs/sig-windows-tools/releases/download/windows-containerd-nightly/windows-containerd.tar.gz\",                 \"loadBalancerSku\": \"basic\"             }         },         \"masterProfile\": {             \"count\": 1,             \"vmSize\": \"StandardD2v2\",             \"availabilityProfile\": \"AvailabilitySet\",             \"platformUpdateDomainCount\": 1         },         \"agentPoolProfiles\": [             {                 \"name\": \"windowspool\",                 \"count\": 1,                 \"vmSize\": \"StandardD8sv3\",                 \"availabilityProfile\": \"VirtualMachineScaleSets\",                 \"osType\": \"Windows\",                 \"enableVMSSNodePublicIP\": true             }         ],         \"windowsProfile\": {             \"adminUsername\": \"azureuser\",             \"adminPassword\": \"password1234$\",             \"sshEnabled\": true,             \"enableAutomaticUpdates\": true,             \"WindowsPublisher\": \"microsoft-aks\",             \"WindowsOffer\": \"aks-windows\",             \"WindowsSku\": \"2019-datacenter-core-ctrd-2108\",             \"imageVersion\": \"17763.2061.210830\"         },         \"linuxProfile\": {             \"adminUsername\": \"azureuser\",             \"ssh\": {                 \"publicKeys\": [                     {                         \"keyData\": \"\"                     }                 ]             }         }     } }  Requirements  Kubernetes version 1.23 or higher is required for HostProcess pods to work on the cluster. Containerd version 1.6 or higher  \"--feature-gates\": \"WindowsHostProcessContainers=true\" is required in both the apiServerConfig as well as kubeletConfig of the Kubernetes cluster.  After you run make-aks-engine-cluster.ps1 you will hopefully see successful output:  Creating a Windows HostProcess pod capable Kubernetes cluster using AKS-Engine  Make a HostProcess pod  The HostProcess pod we will use is a simple go-lang application which reads and writes to a specified file.  package main  import ( \t\"fmt\" \t\"io/ioutil\" \t\"os\" \t\"time\" )  func main() { \thostFileToReadLocation := os.Args[1] \thostFileToWriteLocation := os.Args[2]  \tfmt.Printf(\"host file to read: %s\\n\", hostFileToReadLocation) \tfmt.Printf(\"host file to write: %s\\n\", hostFileToWriteLocation)  \t// Read host file from inside the container! \tcontent, err := ioutil.ReadFile(hostFileToReadLocation) \tif err != nil { \t\tfmt.Printf(\"Error from reading: %v\\n\", err) \t} \ttext := string(content) \tfmt.Println(text)  \t// Write to host file from inside the container! \tf, err := os.OpenFile(hostFileToWriteLocation, os.OAPPEND|os.OWRONLY|os.OCREATE, 0600) \tif err != nil { \t\tfmt.Printf(\"Error opening file to write: %v\\n\", err) \t} \tif , err = f.WriteString(\"Hello from the container!\\n\"); err != nil { \t\tfmt.Printf(\"Error writing to file: %v\\n\", err) \t}  \t// Sleep \ttime.Sleep(1  time.Hour) }  Use golang image to build binary FROM golang:1.17 AS builder  Make a working directory WORKDIR /usr/local/app  Copy the source code into the container COPY src/ .  Build the app RUN go build app.go  Copy the app binary into the final container image FROM mcr.microsoft.com/windows/nanoserver:1809 COPY --from=builder /usr/local/app/app.exe \\     /usr/local/bin/app.exe  ENTRYPOINT [\"/usr/local/bin/app.exe\"]  docker build -t windowspodfilemount:v1.0.0 -f Dockerfile .  Upon execution of docker build, you should see output such as:  Building docker image of an go-lang app which reads and writes to specified file  RDP and create a host file  We will RDP to the Windows VM and create a file called hostfile.txt that simply contains Hello from the host.  We do this simply to demonstrate how the HostProcess pod will be able to read and write to this file.  Download RDP file to Windows VM  Use credentials from hostprocess-cluster.json to connect  Create a text file  Deploy the HostProcess Pod  You may notice a lack of a manual permissions step, such as with normal Windows pods.  This is because HostProcess pods run as, host processes, and can have elevated permissions.  The hostprocesspod.yaml shows this with runAsUserName, which lets you specify the permissions you want the pod to have.  From the Kubernetes docs: ‚ÄúExamples of acceptable values for the runAsUserName field: ContainerAdministrator, ContainerUser, NT AUTHORITY\\\\NETWORK SERVICE, NT AUTHORITY\\\\LOCAL SERVICE.‚Äù  I discovered though you can also specify the following for even more privileged access: NT AUTHORITY\\\\SYSTEM.  apiVersion: v1 kind: Pod metadata:   name: hostprocesspod spec:   nodeSelector:     kubernetes.io/os: windows   securityContext:     windowsOptions:       hostProcess: true       runAsUserName: \"NT AUTHORITY\\\\SYSTEM\" # This lets the pod have elevated permissions   hostNetwork: true   containers:   name: winpodfilemount     image: coolstercodes.azurecr.io/windowspodfilemount:v1.0.0     imagePullPolicy: Always     args: [\"C:\\\\users\\\\azureuser\\\\hostfile.txt\", \"C:\\\\users\\\\azureuser\\\\hostfile.txt\"]     command: [\"%CONTAINERSANDBOXMOUNTPOINT%/usr/local/bin/app.exe\"]  .\\kubectl --kubeconfig .\\output\\hostprocess-cluster\\kubeconfig\\kubeconfig.westus2.json apply -f hostprocesspod.yaml  .\\kubectl --kubeconfig .\\_output\\hostprocess-cluster\\kubeconfig\\kubeconfig.westus2.json logs hostprocesspod  Upon deployment using the above kubectl command, and inspecting the logs we'll see:  HostProcess pod logs  Verify  RDP back onto the host VM and see if the file changed:  The hostfile.txt file changed!*  You did it! You launched a Windows HostProcess pod that lets you access host files without a manual permissions step, congratulations.",
  "tags": [
   "Kubernetes",
   "Windows"
  ],
  "img": "/content/images/windows-hostprocess-pod-host-file-access/folder.jpg"
 },
 "windows-pod-host-file-mount-on-kubernetes": {
  "href": "windows-pod-host-file-mount-on-kubernetes",
  "title": "Windows Pod Host File Mount on Kubernetes",
  "summary": "Mounting a Windows filesystem in Kubernetes Here we will mount the host file system into a windows pod on Kubernetes.  Alternatively, if you're not trying to read/edit an existing host file, you can mount a brand new volume to the pod, which we will also show here.    Source code  Create Kubernetes cluster  Step one is to create or have access to a Kubernetes cluster with a Windows node.  One way to do this is to use AKS Engine, which sets up all the infrastructure for your Kubernetes cluster in Azure.  make-aks-engine-cluster.ps1 along with win-cluster.json will do this for you.  All you need to provide is the subscription id you wish to deploy to:  $SUBSCRIPTIONID='' $CLUSTERNAME='win-cluster' $LOCATION='westus2' $APIMODEL='win-cluster.json'  Creates the resource group which will house your cluster az group create --subscription $SUBSCRIPTIONID --location $LOCATION --name $CLUSTERNAME  Creates an Azure Service Principal to let AKS-Engine deploy resources (your cluster) to your resource group $AZSP=az ad sp create-for-rbac --name win-cluster-service-principal --role=\"Owner\" --scopes=\"/subscriptions/$SUBSCRIPTIONID/resourceGroups/$CLUSTERNAME\" -o json | ConvertFrom-Json $CLIENTID=$AZSP.appId $CLIENTSECRET=$AZSP.password  Let azure permissions propogate before creating cluster Start-Sleep -Seconds 180  Create a hostprocess capable kubernetes cluster using AKS-Engine .\\aks-engine deploy `     --subscription-id $SUBSCRIPTIONID  `     --client-id $CLIENTID `     --client-secret $CLIENTSECRET `     --resource-group $CLUSTERNAME `     --dns-prefix $CLUSTERNAME `     --location $LOCATION `     --api-model $APIMODEL `     --force-overwrite  {    \"apiVersion\": \"vlabs\",    \"properties\": {       \"orchestratorProfile\": {          \"orchestratorType\": \"Kubernetes\",          \"orchestratorRelease\": \"1.23\",          \"kubernetesConfig\": {             \"networkPlugin\": \"azure\",             \"containerRuntime\": \"containerd\",             \"windowsContainerdURL\": \"https://github.com/kubernetes-sigs/sig-windows-tools/releases/download/windows-containerd-nightly/windows-containerd.tar.gz\",             \"loadBalancerSku\": \"basic\"          }       },       \"masterProfile\": {          \"count\": 1,          \"vmSize\": \"StandardD2v2\",          \"availabilityProfile\": \"AvailabilitySet\",          \"platformUpdateDomainCount\": 1       },       \"agentPoolProfiles\": [          {             \"name\": \"windowspool\",             \"count\": 1,             \"vmSize\": \"StandardD8sv3\",             \"availabilityProfile\": \"VirtualMachineScaleSets\",             \"osType\": \"Windows\",             \"enableVMSSNodePublicIP\": true          }       ],       \"windowsProfile\": {          \"adminUsername\": \"azureuser\",          \"adminPassword\": \"password1234$\",          \"sshEnabled\": true,          \"enableAutomaticUpdates\": true,          \"WindowsPublisher\": \"microsoft-aks\",          \"WindowsOffer\": \"aks-windows\",          \"WindowsSku\": \"2019-datacenter-core-ctrd-2108\",          \"imageVersion\": \"17763.2061.210830\"       },       \"linuxProfile\": {          \"adminUsername\": \"azureuser\",          \"ssh\": {             \"publicKeys\": [                {                   \"keyData\": \"\"                }             ]          }       }    } }  After execution you will hopefully see:  Deploying a windows Kubernetes cluster using AKS Engine  RDP and create host text file  Next we'll RDP to the Windows agent node and create a text file.  This is just to demonstrate how the pod will be able to read and write files from/to the host.  To do this navigate to your Kubernetes agent node in Azure Portal:  And RDP using the credentials found in win-cluster.json  Finally, execute notepad hostfile.txt and type a funny message:  Writing a host file which we will read and write to from inside the pod  Change the text file permissions    Update 04/10/2022: Check out our post on HostProcess pods where this step is no longer needed  Normal Windows pods can't run as ‚Äúprivileged‚Äù pods, so we have to do this manual permissions step. There is a new type of Windows pod called ‚ÄúHostProcess‚Äù pods, which can do this by default without the permissions step, a post soon to follow about it.  For the time being, we have to give the right permissions:  icacls C:\\users\\azureuser /grant BUILTIN\\Users:(OI)(CI)(F) /t  This command will give the directory C:\\users\\azureuser and all files/directories in it the permissions necessary for the pod to be able to read and write files.  (OI) and (CI) means that all future files in this directory will have these permissions, and (F) means full access. /t means recursively. The BUILTIN\\Users is the group the pod will be a part of. Read more here if you're interested.  Applying proper permissions to directory, so pod can read/write to it  Containerize an app which reads and writes to a file  Next we use Docker to containerize app.go, which simply reads and writes to a given file:  docker build -t windowspodfilemount:v1.0.0 -f Dockerfile .  Use golang image to build binary FROM golang:1.17 AS builder  Make a working directory WORKDIR /usr/local/app  Copy the source code into the container COPY src/ .  Build the app RUN go build app.go  Copy the app binary into the final container image FROM mcr.microsoft.com/windows/nanoserver:1809 COPY --from=builder /usr/local/app/app.exe \\     /usr/local/bin/app.exe  ENTRYPOINT [\"/usr/local/bin/app.exe\"]  package main  import ( \t\"fmt\" \t\"io/ioutil\" \t\"os\" \t\"time\" )  func main() { \thostFileToReadLocation := os.Args[1] \thostFileToWriteLocation := os.Args[2]  \tfmt.Printf(\"host file to read: %s\\n\", hostFileToReadLocation) \tfmt.Printf(\"host file to write: %s\\n\", hostFileToWriteLocation)  \t// Read host file from inside the container! \tcontent, err := ioutil.ReadFile(hostFileToReadLocation) \tif err != nil { \t\tfmt.Printf(\"Error from reading: %v\\n\", err) \t} \ttext := string(content) \tfmt.Println(text)  \t// Write to host file from inside the container! \tf, err := os.OpenFile(hostFileToWriteLocation, os.OAPPEND|os.OWRONLY|os.OCREATE, 0600) \tif err != nil { \t\tfmt.Printf(\"Error opening file to write: %v\\n\", err) \t} \tif , err = f.WriteString(\"Hello from the container!\\n\"); err != nil { \t\tfmt.Printf(\"Error writing to file: %v\\n\", err) \t}  \t// Sleep \ttime.Sleep(1  time.Hour) }  Containerizing a simple app which reads and writes to a specified file  Deploy the pod with host file mount  Next we deploy the app in a Windows pod with the host file system mounted as a volume.  .\\kubectl --kubeconfig .\\output\\win-cluster\\kubeconfig\\kubeconfig.westus2.json apply -f windowspodfilemount.yaml  apiVersion: v1 kind: Pod metadata:   name: winpodfilemount spec:   nodeSelector:     kubernetes.io/os: windows   containers:   name: winpodfilemount     image: coolstercodes.azurecr.io/windowspodfilemount:v1.0.0     imagePullPolicy: Always     args: [\"C:\\\\hostfilemount\\\\hostfile.txt\", \"C:\\\\hostfilemount\\\\hostfile.txt\"]     volumeMounts:       name: hostfilemount         mountPath: /hostfilemount   volumes:     name: hostfilemount       hostPath:         path: /users/azureuser         type: Directory  After deployment you should see something like:  Deploying the windows pod with file mount  And finally view the logs with:  .\\kubectl --kubeconfig .\\output\\win-cluster\\kubeconfig\\kubeconfig.westus2.json logs winpodfilemount  View pod logs, you see ‚ÄúHello from the host‚Äù because the pod was able to read the hostfile.txt contents  Verify  Now you can RDP back onto the Windows agent node and see the updated hostfile.txt:  You wrote to a host file from within the pod! Great job  Alternative  If you're just trying to write to the host and it doesn't need to be an existing directory, you could alternatively use windowspodfilemountalternative.yaml, which creates a new directory on the host which the pod has full access to.  .\\kubectl --kubeconfig .\\output\\win-cluster\\kubeconfig\\kubeconfig.westus2.json apply -f windowspodfilemountalternative.yaml  apiVersion: v1 kind: Pod metadata:   name: winpodfilemount spec:   nodeSelector:     kubernetes.io/os: windows   containers:   name: winpodfilemount     image: coolstercodes.azurecr.io/windowspodfilemount:v1.0.0     imagePullPolicy: Always     args: [\"C:\\\\hostfilemount\\\\hostfile.txt\", \"C:\\\\hostfilemount\\\\hostfile.txt\"]     volumeMounts:       name: hostfilemount         mountPath: /hostfilemount   volumes:     name: hostfilemount       hostPath:         path: /new/host/directory         type: DirectoryOrCreate  The ‚Äúread‚Äù portion of the code will error out (because there's nothing in this new directory), but the write will succeed:  .\\kubectl --kubeconfig .\\_output\\win-cluster\\kubeconfig\\kubeconfig.westus2.json logs winpodfilemount  Alternative approach where you just need to write to the host, and it doesn't need to be an existing directory/file  And finally you can verify by RDP'ing to the Windows agent node, that there is a new directory created by the pod:  Writing a new file to the host, in a new directory*",
  "tags": [
   "Kubernetes",
   "Windows"
  ],
  "img": "/content/images/windows-pod-host-file-mount-on-kubernetes/Windows.png"
 }
}
